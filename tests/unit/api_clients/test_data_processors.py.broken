"""Unit tests for Alpha Vantage API data processors."""

from unittest.mock import Mock

import pandas as pd
import pytest

from src.ticker_converter.api_clients.data_processors import (
    convert_time_series_to_dataframe,
    parse_time_series_key,
    process_company_overview,
    process_currency_exchange_rate,
)
from src.ticker_converter.api_clients.exceptions import AlphaVantageDataError


class TestDataProcessors:
    """Test suite for Alpha Vantage API data processors."""

    def test_convert_time_series_to_dataframe_daily(self):
        """Test conversion of daily time series data to DataFrame."""
        # Sample Alpha Vantage daily response
        raw_data = {
            "Time Series (Daily)": {
                "2025-08-14": {
                    "1. open": "220.00",
                    "2. high": "225.00",
                    "3. low": "219.00",
                    "4. close": "224.50",
                    "5. volume": "1000000",
                },
                "2025-08-13": {
                    "1. open": "218.00",
                    "2. high": "223.00",
                    "3. low": "217.00",
                    "4. close": "221.50",
                    "5. volume": "900000",
                },
            }
        }

        df = convert_time_series_to_dataframe(raw_data, "Time Series (Daily)")

        assert isinstance(df, pd.DataFrame)
        assert len(df) == 2
        assert "open" in df.columns
        assert "high" in df.columns
        assert "low" in df.columns
        assert "close" in df.columns
        assert "volume" in df.columns

        # Check data types
        assert df["open"].dtype == "float64"
        assert df["high"].dtype == "float64"
        assert df["low"].dtype == "float64"
        assert df["close"].dtype == "float64"
        assert df["volume"].dtype == "int64"

        # Check index is datetime
        assert isinstance(df.index, pd.DatetimeIndex)

    def test_convert_time_series_to_dataframe_intraday(self):
        """Test conversion of intraday time series data to DataFrame."""
        raw_data = {
            "Time Series (5min)": {
                "2025-08-14 16:00:00": {
                    "1. open": "220.00",
                    "2. high": "225.00",
                    "3. low": "219.00",
                    "4. close": "224.50",
                    "5. volume": "10000",
                },
                "2025-08-14 15:55:00": {
                    "1. open": "218.00",
                    "2. high": "223.00",
                    "3. low": "217.00",
                    "4. close": "221.50",
                    "5. volume": "9000",
                },
            }
        }

        df = convert_time_series_to_dataframe(raw_data, "Time Series (5min)")

        assert isinstance(df, pd.DataFrame)
        assert len(df) == 2
        assert isinstance(df.index, pd.DatetimeIndex)

    def test_convert_time_series_to_dataframe_forex(self):
        """Test conversion of forex time series data to DataFrame."""
        raw_data = {
            "Time Series FX (Daily)": {
                "2025-08-14": {
                    "1. open": "0.7340",
                    "2. high": "0.7360",
                    "3. low": "0.7330",
                    "4. close": "0.7350",
                },
                "2025-08-13": {
                    "1. open": "0.7320",
                    "2. high": "0.7345",
                    "3. low": "0.7315",
                    "4. close": "0.7340",
                },
            }
        }

        df = convert_time_series_to_dataframe(raw_data, "Time Series FX (Daily)")

        assert isinstance(df, pd.DataFrame)
        assert len(df) == 2
        assert "open" in df.columns
        assert "high" in df.columns
        assert "low" in df.columns
        assert "close" in df.columns
        # Forex data doesn't have volume
        assert "volume" not in df.columns

    def test_convert_time_series_missing_key(self):
        """Test handling of missing time series key."""
        raw_data = {
            "Meta Data": {"1. Information": "Daily Prices", "2. Symbol": "AAPL"}
            # Missing time series data
        }

        with pytest.raises(AlphaVantageDataError, match="No time series data found"):
            convert_time_series_to_dataframe(raw_data, "Time Series (Daily)")

    def test_convert_time_series_empty_data(self):
        """Test handling of empty time series data."""
        raw_data = {"Time Series (Daily)": {}}

        with pytest.raises(AlphaVantageDataError, match="No time series data found"):
            convert_time_series_to_dataframe(raw_data, "Time Series (Daily)")

    def test_convert_time_series_invalid_data_format(self):
        """Test handling of invalid data format."""
        raw_data = {
            "Time Series (Daily)": {
                "2025-08-14": {
                    "1. open": "invalid_number",
                    "2. high": "225.00",
                    "3. low": "219.00",
                    "4. close": "224.50",
                    "5. volume": "1000000",
                }
            }
        }

        with pytest.raises(
            AlphaVantageDataError, match="Error parsing time series data"
        ):
            convert_time_series_to_dataframe(raw_data, "Time Series (Daily)")

    def test_process_company_overview_success(self):
        """Test successful company overview processing."""
        raw_data = {
            "Symbol": "AAPL",
            "AssetType": "Common Stock",
            "Name": "Apple Inc",
            "Description": "Apple Inc. designs, manufactures, and markets smartphones",
            "Exchange": "NASDAQ",
            "Currency": "USD",
            "Country": "USA",
            "Sector": "TECHNOLOGY",
            "Industry": "Electronic Computers",
            "MarketCapitalization": "3000000000000",
            "EBITDA": "123000000000",
            "PERatio": "28.5",
            "PEGRatio": "1.2",
            "BookValue": "3.85",
            "DividendPerShare": "0.95",
            "DividendYield": "0.42",
            "EPS": "6.12",
            "RevenuePerShareTTM": "24.31",
            "ProfitMargin": "0.251",
            "OperatingMarginTTM": "0.298",
            "ReturnOnAssetsTTM": "0.223",
            "ReturnOnEquityTTM": "1.475",
            "RevenueTTM": "394000000000",
            "GrossProfitTTM": "169000000000",
            "DilutedEPSTTM": "6.12",
            "QuarterlyEarningsGrowthYOY": "0.05",
            "QuarterlyRevenueGrowthYOY": "0.02",
            "AnalystTargetPrice": "230.00",
            "TrailingPE": "28.5",
            "ForwardPE": "26.2",
            "PriceToSalesRatioTTM": "7.6",
            "PriceToBookRatio": "58.4",
            "EVToRevenue": "7.8",
            "EVToEBITDA": "23.1",
            "Beta": "1.25",
            "52WeekHigh": "237.23",
            "52WeekLow": "164.08",
            "50DayMovingAverage": "220.50",
            "200DayMovingAverage": "195.30",
            "SharesOutstanding": "15500000000",
            "DividendDate": "2025-05-16",
            "ExDividendDate": "2025-05-10",
        }

        result = process_company_overview(raw_data)

        assert result["symbol"] == "AAPL"
        assert result["name"] == "Apple Inc"
        assert result["sector"] == "TECHNOLOGY"
        assert result["market_cap"] == 3000000000000.0
        assert result["pe_ratio"] == 28.5
        assert result["dividend_yield"] == 0.42
        assert result["beta"] == 1.25
        assert result["52_week_high"] == 237.23
        assert result["52_week_low"] == 164.08

    def test_process_company_overview_missing_fields(self):
        """Test company overview processing with missing fields."""
        raw_data = {
            "Symbol": "AAPL",
            "Name": "Apple Inc",
            "Sector": "TECHNOLOGY",
            # Missing many fields
        }

        result = process_company_overview(raw_data)

        assert result["symbol"] == "AAPL"
        assert result["name"] == "Apple Inc"
        assert result["sector"] == "TECHNOLOGY"
        assert result["market_cap"] is None
        assert result["pe_ratio"] is None

    def test_process_company_overview_invalid_numeric_fields(self):
        """Test company overview processing with invalid numeric fields."""
        raw_data = {
            "Symbol": "AAPL",
            "Name": "Apple Inc",
            "MarketCapitalization": "None",  # Invalid number
            "PERatio": "N/A",  # Invalid number
            "Beta": "invalid",  # Invalid number
        }

        result = process_company_overview(raw_data)

        assert result["symbol"] == "AAPL"
        assert result["name"] == "Apple Inc"
        assert result["market_cap"] is None
        assert result["pe_ratio"] is None
        assert result["beta"] is None

    def test_process_currency_exchange_rate_success(self):
        """Test successful currency exchange rate processing."""
        raw_data = {
            "Realtime Currency Exchange Rate": {
                "1. From_Currency Code": "USD",
                "2. From_Currency Name": "United States Dollar",
                "3. To_Currency Code": "GBP",
                "4. To_Currency Name": "British Pound Sterling",
                "5. Exchange Rate": "0.73500000",
                "6. Last Refreshed": "2025-08-14 16:00:00",
                "7. Time Zone": "UTC",
                "8. Bid Price": "0.73490000",
                "9. Ask Price": "0.73510000",
            }
        }

        result = process_currency_exchange_rate(raw_data)

        assert result["from_currency"] == "USD"
        assert result["to_currency"] == "GBP"
        assert result["exchange_rate"] == 0.735
        assert result["last_refreshed"] == "2025-08-14 16:00:00"
        assert result["bid_price"] == 0.7349
        assert result["ask_price"] == 0.7351

    def test_process_currency_exchange_rate_missing_data(self):
        """Test currency exchange rate processing with missing data."""
        raw_data = {}

        with pytest.raises(
            AlphaVantageDataError, match="No currency exchange rate data found"
        ):
            process_currency_exchange_rate(raw_data)

    def test_process_currency_exchange_rate_invalid_rate(self):
        """Test currency exchange rate processing with invalid rate."""
        raw_data = {
            "Realtime Currency Exchange Rate": {
                "1. From_Currency Code": "USD",
                "3. To_Currency Code": "GBP",
                "5. Exchange Rate": "invalid_rate",
            }
        }

        with pytest.raises(AlphaVantageDataError, match="Error parsing exchange rate"):
            process_currency_exchange_rate(raw_data)

    def test_parse_time_series_key_daily(self):
        """Test parsing of daily time series key."""
        raw_data = {"Time Series (Daily)": {}, "Meta Data": {}}

        key = parse_time_series_key(raw_data)
        assert key == "Time Series (Daily)"

    def test_parse_time_series_key_intraday(self):
        """Test parsing of intraday time series key."""
        raw_data = {"Time Series (5min)": {}, "Meta Data": {}}

        key = parse_time_series_key(raw_data)
        assert key == "Time Series (5min)"

    def test_parse_time_series_key_forex(self):
        """Test parsing of forex time series key."""
        raw_data = {"Time Series FX (Daily)": {}, "Meta Data": {}}

        key = parse_time_series_key(raw_data)
        assert key == "Time Series FX (Daily)"

    def test_parse_time_series_key_digital_currency(self):
        """Test parsing of digital currency time series key."""
        raw_data = {"Time Series (Digital Currency Daily)": {}, "Meta Data": {}}

        key = parse_time_series_key(raw_data)
        assert key == "Time Series (Digital Currency Daily)"

    def test_parse_time_series_key_not_found(self):
        """Test parsing when no time series key is found."""
        raw_data = {"Meta Data": {}, "Some Other Key": {}}

        with pytest.raises(AlphaVantageDataError, match="No time series data found"):
            parse_time_series_key(raw_data)
