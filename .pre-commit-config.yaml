# Pre-commit configuration for enhanced quality pipeline
# Install: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]

  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=120]

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=120]

  - repo: https://github.com/pylint-dev/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        args: [--rcfile=pyproject.toml]
        additional_dependencies: [fastapi, uvicorn, psycopg2-binary, pandas, requests, python-dotenv, pydantic, apache-airflow]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--config-file=pyproject.toml]
        additional_dependencies: [types-requests, types-psycopg2]

  # SQL linting and formatting
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.0.2
    hooks:
      - id: sqlfluff-lint
        args: [--dialect=postgres, --config=.sqlfluff]
        files: \.sql$
      - id: sqlfluff-fix
        args: [--dialect=postgres, --config=.sqlfluff]
        files: \.sql$

  # Custom SQL quality checks
  - repo: local
    hooks:
      - id: sql-quality-check
        name: SQL Quality Check
        entry: bash
        language: system
        files: \.sql$
        args:
          - -c
          - |
            # Basic SQL quality checks
            for file in "$@"; do
              if grep -q "SELECT \*" "$file"; then
                echo "⚠️  SELECT * found in $file - consider explicit column lists"
              fi
              if [[ "$file" == *"/ddl/"* ]] && ! grep -q "^-- Purpose:" "$file"; then
                echo "⚠️  Missing purpose comment in DDL file: $file"
              fi
            done

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, -f, json, -o, bandit-report.json]
        pass_filenames: false

# Configuration for specific environments
ci:
  # Skip slow hooks in CI for faster feedback
  skip: [pylint, mypy]
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
