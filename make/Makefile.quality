# ============================================================================
# CODE QUALITY, LINTING, AND VALIDATION
# ============================================================================
# This module handles code quality checks, linting, formatting, and validation
# with comprehensive cross-platform support
#
# Dependencies: Makefile.platform, Makefile.env, Makefile.install
# ============================================================================

# Quality configuration
QUALITY_CONFIG_DIR := .

# Quality tool configuration files
BLACK_CONFIG := pyproject.toml
PYLINT_CONFIG := .pylintrc
MYPY_CONFIG := pyproject.toml
RUFF_CONFIG := pyproject.toml

# ============================================================================
# COMPREHENSIVE QUALITY SUITE
# ============================================================================

.PHONY: quality quality-fix quality-check quality-report

quality: _load_env ## ✅ Execute all code quality checks
	@printf "\\033[0;34mRunning comprehensive code quality suite...\\033[0m\\n"
	@printf "\\033[1;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\033[0m\\n"
	@$(MAKE) _check_quality_deps
	@printf "\\033[0;36mSTEP 1: Code Formatting Check\\033[0m\\n"
	@$(MAKE) black-check
	@printf "\\033[0;36mSTEP 2: Import Sorting Check\\033[0m\\n"
	@$(MAKE) isort-check 2>/dev/null || printf "\033[0;33m⚠ isort not available\033[0m\n"
	@printf "\\033[0;36mSTEP 3: Linting Analysis\\033[0m\\n"
	@$(MAKE) pylint
	@printf "\\033[0;36mSTEP 4: Type Checking\\033[0m\\n"
	@$(MAKE) mypy
	@printf "\\033[0;36mSTEP 5: Security Scanning\\033[0m\\n"
	@$(MAKE) security-scan
	@printf "\\033[1;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\033[0m\\n"
	@printf "\\033[0;32m✓ Code quality suite completed\\033[0m\\n"

quality-fix: _load_env ## ✅ Auto-fix code quality issues where possible
	@printf "\\033[0;34mAuto-fixing code quality issues...\\033[0m\\n"
	@$(MAKE) _check_quality_deps
	@printf "\\033[1;33mRunning Black formatter...\\033[0m\\n"
	@$(MAKE) black
	@printf "\\033[1;33mRunning import sorting...\\033[0m\\n"
	@$(MAKE) isort 2>/dev/null || printf "\033[0;33m⚠ isort not available\033[0m\n"
	@printf "\\033[1;33mRunning Ruff auto-fixes...\\033[0m\\n"
	@$(MAKE) ruff-fix 2>/dev/null || printf "\033[0;33m⚠ ruff not available\033[0m\n"
	@printf "\\033[0;32m✓ Auto-fixes completed\\033[0m\\n"

quality-check: _load_env ## ✅ Validate code quality without making changes
	@printf "\\033[0;34mChecking code quality (no modifications)...\\033[0m\\n"
	@$(MAKE) _check_quality_deps
	@$(MAKE) black-check
	@$(MAKE) pylint
	@$(MAKE) mypy
	@printf "\\033[0;32m✓ Quality check completed\\033[0m\\n"

quality-report: _load_env ## ✅ Generate comprehensive quality report
	@printf "\\033[0;34mGenerating code quality report...\\033[0m\\n"
	@$(MAKE) _check_quality_deps
	@printf "\\033[0;33mCreating quality report...\\033[0m\\n"
	@echo "# Code Quality Report" > quality-report.md
	@echo "Generated on: $$(date)" >> quality-report.md
	@echo "" >> quality-report.md
	@echo "## Black Formatting Check" >> quality-report.md
	@$(MAKE) black-check >> quality-report.md 2>&1 || echo "Black check failed" >> quality-report.md
	@echo "" >> quality-report.md
	@echo "## Pylint Analysis" >> quality-report.md
	@$(MAKE) pylint >> quality-report.md 2>&1 || echo "Pylint analysis failed" >> quality-report.md
	@echo "" >> quality-report.md
	@echo "## MyPy Type Checking" >> quality-report.md
	@$(MAKE) mypy >> quality-report.md 2>&1 || echo "MyPy check failed" >> quality-report.md
	@printf "\\033[0;32m✓ Quality report generated: quality-report.md\\033[0m\\n"

# ============================================================================
# BLACK CODE FORMATTING
# ============================================================================

.PHONY: black black-check black-diff

black: _load_env ## ✅ Format code with Black
	@printf "\\033[0;34mFormatting code with Black...\\033[0m\\n"
	@$(MAKE) _check_black_deps
	@printf "\\033[0;33mRunning Black formatter on source code...\\033[0m\\n"
	@$(PYTHON) -m black $(SRC_DIR) $(TEST_DIR) --config=$(BLACK_CONFIG) 2>/dev/null || \
	$(PYTHON) -m black $(SRC_DIR) $(TEST_DIR)
	@printf "\\033[0;32m✓ Code formatting completed\\033[0m\\n"

black-check: _load_env ## ✅ Validate Black formatting without changes
	@printf "\\033[0;36mChecking Black formatting...\\033[0m\\n"
	@$(MAKE) _check_black_deps
	@$(PYTHON) -m black --check $(SRC_DIR) $(TEST_DIR) --config=$(BLACK_CONFIG) 2>/dev/null || \
	$(PYTHON) -m black --check $(SRC_DIR) $(TEST_DIR) && \
	printf "\\033[0;32m✓ Black formatting check passed\\033[0m\\n" || \
	(printf "\\033[0;31m❌ Black formatting issues found\\033[0m\\n" && \
	 printf "\\033[0;36mFix with: make black\\033[0m\\n" && exit 1)

black-diff: _load_env ## ✅ Display Black formatting differences
	@printf "\\033[0;36mShowing Black formatting differences...\\033[0m\\n"
	@$(MAKE) _check_black_deps
	@$(PYTHON) -m black --diff $(SRC_DIR) $(TEST_DIR) --config=$(BLACK_CONFIG) 2>/dev/null || \
	$(PYTHON) -m black --diff $(SRC_DIR) $(TEST_DIR)

# ============================================================================
# PYLINT STATIC ANALYSIS
# ============================================================================

.PHONY: pylint pylint-report pylint-config

pylint: _load_env ## ✅ Execute Pylint static analysis
	@printf "\\033[0;36mRunning Pylint static analysis...\\033[0m\\n"
	@$(MAKE) _check_pylint_deps
	@if [ -f $(PYLINT_CONFIG) ]; then \
		printf "\033[0;33mUsing Pylint configuration: $(PYLINT_CONFIG)\033[0m\n"; \
		$(PYTHON) -m pylint $(SRC_DIR) --rcfile=$(PYLINT_CONFIG); \
	else \
		printf "\033[0;33mUsing default Pylint configuration\033[0m\n"; \
		$(PYTHON) -m pylint $(SRC_DIR); \
	fi && \
	printf "\033[0;32m✓ Pylint analysis completed\033[0m\n" || \
	(printf "\033[0;31m❌ Pylint issues found\033[0m\n" && exit 1)

pylint-report: _load_env ## ✅ Generate detailed Pylint report
	@printf "\\033[0;34mGenerating detailed Pylint report...\\033[0m\\n"
	@$(MAKE) _check_pylint_deps
	@if [ -f $(PYLINT_CONFIG) ]; then \
		$(PYTHON) -m pylint $(SRC_DIR) --rcfile=$(PYLINT_CONFIG) --output-format=text > pylint-report.txt 2>&1; \
	else \
		$(PYTHON) -m pylint $(SRC_DIR) --output-format=text > pylint-report.txt 2>&1; \
	fi
	@printf "\\033[0;32m✓ Pylint report generated: pylint-report.txt\\033[0m\\n"

pylint-config: ## ✅ Display Pylint configuration
	@printf "\\033[0;36mPylint Configuration:\\033[0m\\n"
	@if [ -f $(PYLINT_CONFIG) ]; then \
		printf "\033[0;32m✓ Configuration file: $(PYLINT_CONFIG)\033[0m\n"; \
		printf "\033[0;33mKey settings:\033[0m\n"; \
		grep -E "^[a-z-]+" $(PYLINT_CONFIG) | head -10; \
	else \
		printf "\033[0;33m⚠ No custom configuration file found\033[0m\n"; \
		printf "\033[0;36mUsing default Pylint settings\033[0m\n"; \
	fi

# ============================================================================
# MYPY TYPE CHECKING
# ============================================================================

.PHONY: mypy mypy-report mypy-config

mypy: _load_env ## ✅ Execute MyPy type checking
	@printf "\\033[0;36mRunning MyPy type checking...\\033[0m\\n"
	@$(MAKE) _check_mypy_deps
	@if [ -f $(MYPY_CONFIG) ]; then \
		printf "\033[0;33mUsing MyPy configuration: $(MYPY_CONFIG)\033[0m\n"; \
		$(PYTHON) -m mypy $(SRC_DIR) --config-file=$(MYPY_CONFIG); \
	else \
		printf "\033[0;33mUsing default MyPy configuration\033[0m\n"; \
		$(PYTHON) -m mypy $(SRC_DIR); \
	fi && \
	printf "\033[0;32m✓ MyPy type checking completed\033[0m\n" || \
	(printf "\033[0;31m❌ MyPy type issues found\033[0m\n" && exit 1)

mypy-report: _load_env ## ✅ Generate MyPy report
	@printf "\\033[0;34mGenerating MyPy type checking report...\\033[0m\\n"
	@$(MAKE) _check_mypy_deps
	@if [ -f $(MYPY_CONFIG) ]; then \
		$(PYTHON) -m mypy $(SRC_DIR) --config-file=$(MYPY_CONFIG) > mypy-report.txt 2>&1; \
	else \
		$(PYTHON) -m mypy $(SRC_DIR) > mypy-report.txt 2>&1; \
	fi
	@printf "\\033[0;32m✓ MyPy report generated: mypy-report.txt\\033[0m\\n"

mypy-config: ## ✅ Display MyPy configuration
	@printf "\\033[0;36mMyPy Configuration:\\033[0m\\n"
	@if [ -f $(MYPY_CONFIG) ] && grep -q "\[tool.mypy\]" $(MYPY_CONFIG); then \
		printf "\033[0;32m✓ Configuration found in: $(MYPY_CONFIG)\033[0m\n"; \
		printf "\033[0;33mMyPy settings:\033[0m\n"; \
		sed -n '/\[tool.mypy\]/,/^\[/p' $(MYPY_CONFIG) | head -10; \
	else \
		printf "\033[0;33m⚠ No MyPy configuration found\033[0m\n"; \
		printf "\033[0;36mUsing default MyPy settings\033[0m\n"; \
	fi

# ============================================================================
# RUFF LINTING AND FORMATTING
# ============================================================================

.PHONY: ruff ruff-check ruff-fix

ruff: _load_env ## ✅ Execute Ruff linting
	@printf "\\033[0;36mRunning Ruff linting...\\033[0m\\n"
	@$(MAKE) _check_ruff_deps
	@$(PYTHON) -m ruff check $(SRC_DIR) $(TEST_DIR) && \
	printf "\033[0;32m✓ Ruff linting completed\033[0m\n" || \
	(printf "\033[0;31m❌ Ruff issues found\033[0m\n" && \
	 printf "\033[0;36mFix with: make ruff-fix\033[0m\n" && exit 1)

ruff-check: _load_env ## ✅ Validate with Ruff without fixing
	@printf "\\033[0;36mChecking code with Ruff...\\033[0m\\n"
	@$(MAKE) _check_ruff_deps
	@$(PYTHON) -m ruff check $(SRC_DIR) $(TEST_DIR) --no-fix

ruff-fix: _load_env ## ✅ Auto-fix Ruff issues
	@printf "\\033[0;34mAuto-fixing Ruff issues...\\033[0m\\n"
	@$(MAKE) _check_ruff_deps
	@$(PYTHON) -m ruff check $(SRC_DIR) $(TEST_DIR) --fix
	@printf "\\033[0;32m✓ Ruff auto-fixes completed\\033[0m\\n"

# ============================================================================
# IMPORT SORTING
# ============================================================================

.PHONY: isort isort-check isort-diff

isort: _load_env ## ✅ Sort imports with isort
	@printf "\\033[0;34mSorting imports with isort...\\033[0m\\n"
	@$(MAKE) _check_isort_deps
	@$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR) --profile black
	@printf "\\033[0;32m✓ Import sorting completed\\033[0m\\n"

isort-check: _load_env ## ✅ Validate import sorting without changes
	@printf "\\033[0;36mChecking import sorting...\\033[0m\\n"
	@$(MAKE) _check_isort_deps
	@$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR) --profile black --check-only && \
	printf "\033[0;32m✓ Import sorting check passed\033[0m\n" || \
	(printf "\033[0;31m❌ Import sorting issues found\033[0m\n" && \
	 printf "\033[0;36mFix with: make isort\033[0m\n" && exit 1)

isort-diff: _load_env ## ✅ Display import sorting differences
	@printf "\\033[0;36mShowing import sorting differences...\\033[0m\\n"
	@$(MAKE) _check_isort_deps
	@$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR) --profile black --diff

# ============================================================================
# SECURITY SCANNING
# ============================================================================

.PHONY: security-scan security-bandit security-safety

security-scan: _load_env ## ⚙️ Execute comprehensive security scanning
	@printf "\\033[0;34mRunning security vulnerability scanning...\\033[0m\\n"
	@printf "\\033[0;33mRunning Bandit security scanner...\\033[0m\\n"
	@$(MAKE) security-bandit
	@printf "\\033[0;33mRunning Safety dependency scanner...\\033[0m\\n"
	@$(MAKE) security-safety
	@printf "\\033[0;32m✓ Security scanning completed\\033[0m\\n"

security-bandit: _load_env ## ⚙️ Execute Bandit security scanner
	@printf "\\033[0;36mRunning Bandit security analysis...\\033[0m\\n"
	@if $(PYTHON) -c "import bandit" 2>/dev/null; then \
		$(PYTHON) -m bandit -r $(SRC_DIR) -f json -o bandit-report.json 2>/dev/null || \
		$(PYTHON) -m bandit -r $(SRC_DIR); \
		printf "\033[0;32m✓ Bandit security scan completed\033[0m\n"; \
	else \
		printf "\033[0;33m⚠ Bandit not available. Install with: pip install bandit\033[0m\n"; \
		printf "\033[0;36mRun 'make install-test' to get all development tools\033[0m\n"; \
	fi

security-safety: _load_env ## ⚙️ Execute Safety dependency vulnerability scanner
	@printf "\\033[0;36mRunning Safety dependency scan...\\033[0m\\n"
	@if $(PYTHON) -c "import safety" 2>/dev/null; then \
		$(PYTHON) -m safety check --json --output safety-report.json 2>/dev/null || \
		$(PYTHON) -m safety check; \
		printf "\033[0;32m✓ Safety dependency scan completed\033[0m\n"; \
	else \
		printf "\033[0;33m⚠ Safety not available. Install with: pip install safety\033[0m\n"; \
		printf "\033[0;36mRun 'make install-test' to get all development tools\033[0m\n"; \
	fi

# ============================================================================
# PRE-COMMIT HOOKS
# ============================================================================

.PHONY: pre-commit pre-commit-install pre-commit-run

pre-commit: _load_env ## ⚙️ Execute pre-commit hooks on all files
	@printf "\\033[0;36mRunning pre-commit hooks...\\033[0m\\n"
	@if $(PYTHON) -c "import pre_commit" 2>/dev/null; then \
		$(PYTHON) -m pre_commit run --all-files; \
		printf "\033[0;32m✓ Pre-commit hooks completed\033[0m\n"; \
	else \
		printf "\033[0;33m⚠ pre-commit not available\033[0m\n"; \
		printf "\033[0;36mRunning individual quality tools instead...\033[0m\n"; \
		$(MAKE) quality-fix; \
	fi

pre-commit-install: _load_env ## 📦 Install pre-commit hooks
	@printf "\\033[0;34mInstalling pre-commit hooks...\\033[0m\\n"
	@if $(PYTHON) -c "import pre_commit" 2>/dev/null; then \
		$(PYTHON) -m pre_commit install; \
		printf "\033[0;32m✓ Pre-commit hooks installed\033[0m\n"; \
	else \
		printf "\033[0;33m⚠ pre-commit not available. Install with: pip install pre-commit\033[0m\n"; \
		printf "\033[0;36mRun 'make install-test' to get all development tools\033[0m\n"; \
	fi

pre-commit-run: _load_env ## ⚙️ Execute pre-commit hooks on staged files
	@printf "\\033[0;36mRunning pre-commit on staged files...\\033[0m\\n"
	@if $(PYTHON) -c "import pre_commit" 2>/dev/null; then \
		$(PYTHON) -m pre_commit run; \
	else \
		printf "\033[0;33m⚠ pre-commit not available, running quality checks...\033[0m\n"; \
		$(MAKE) quality-check; \
	fi; \
	printf "\033[0;32m✓ Pre-commit workflow completed\033[0m\n"

# ============================================================================
# QUALITY TOOL DEPENDENCY CHECKS
# ============================================================================

.PHONY: _check_black_deps _check_pylint_deps _check_mypy_deps _check_ruff_deps _check_isort_deps

_check_black_deps: ## Internal: Check Black dependencies
	@$(PYTHON) -c "import black" 2>/dev/null || \
	(printf "\033[0;31m❌ Black not available. Run 'make install-test' first.\033[0m\n" && exit 1)

_check_pylint_deps: ## Internal: Check Pylint dependencies
	@$(PYTHON) -c "import pylint" 2>/dev/null || \
	(printf "\033[0;31m❌ Pylint not available. Run 'make install-test' first.\033[0m\n" && exit 1)

_check_mypy_deps: ## Internal: Check MyPy dependencies
	@$(PYTHON) -c "import mypy" 2>/dev/null || \
	(printf "\033[0;31m❌ MyPy not available. Run 'make install-test' first.\033[0m\n" && exit 1)

_check_ruff_deps: ## Internal: Check Ruff dependencies
	@$(PYTHON) -c "import ruff" 2>/dev/null || \
	(printf "\033[0;33m⚠ Ruff not available. Install with: pip install ruff\033[0m\n" && exit 1)

_check_isort_deps: ## Internal: Check isort dependencies
	@$(PYTHON) -c "import isort" 2>/dev/null || \
	(printf "\033[0;33m⚠ isort not available. Install with: pip install isort\033[0m\n" && exit 1)

# ============================================================================
# QUALITY INFORMATION AND CONFIGURATION
# ============================================================================

.PHONY: quality-info quality-config quality-deps-install

quality-info: ## ✅ Display code quality tool information
	@printf "\\033[0;36mCode Quality Tools Information:\\033[0m\\n"
	@printf "\\033[0;33mCore Quality Tools:\\033[0m\\n"
	@$(PYTHON) -c "import black; print(f'  ✓ Black {black.__version__}')" 2>/dev/null || echo "  ❌ Black not available"
	@$(PYTHON) -c "import pylint; print(f'  ✓ Pylint {pylint.__version__}')" 2>/dev/null || echo "  ❌ Pylint not available"
	@$(PYTHON) -c "import mypy; print(f'  ✓ MyPy {mypy.__version__}')" 2>/dev/null || echo "  ❌ MyPy not available"
	@printf "\\033[0;33mOptional Quality Tools:\\033[0m\\n"
	@$(PYTHON) -c "import ruff; print(f'  ✓ Ruff {ruff.__version__}')" 2>/dev/null || echo "  ○ Ruff not available"
	@$(PYTHON) -c "import isort; print(f'  ✓ isort {isort.__version__}')" 2>/dev/null || echo "  ○ isort not available"
	@$(PYTHON) -c "import bandit; print(f'  ✓ Bandit {bandit.__version__}')" 2>/dev/null || echo "  ○ Bandit not available"
	@$(PYTHON) -c "import safety; print(f'  ✓ Safety {safety.__version__}')" 2>/dev/null || echo "  ○ Safety not available"
	@$(PYTHON) -c "import pre_commit; print(f'  ✓ pre-commit {pre_commit.__version__}')" 2>/dev/null || echo "  ○ pre-commit not available"

quality-config: ## ✅ Display quality tool configuration files
	@printf "\\033[0;36mQuality Tool Configuration:\\033[0m\\n"
	@printf "\\033[0;33mConfiguration Files:\\033[0m\\n"
	@printf "\\033[0;36m  pyproject.toml: $(if $(wildcard pyproject.toml),✓ Present,❌ Missing)\n"
	@printf "\\033[0;36m  .pylintrc: $(if $(wildcard .pylintrc),✓ Present,○ Optional)\n"
	@printf "\\033[0;36m  .pre-commit-config.yaml: $(if $(wildcard .pre-commit-config.yaml),✓ Present,○ Optional)\n"
	@printf "\\033[0;36m  setup.cfg: $(if $(wildcard setup.cfg),✓ Present,○ Optional)\n"
	@printf "\\033[0;33mTool Configurations:\\033[0m\\n"
	@if grep -q "\[tool.black\]" pyproject.toml 2>/dev/null; then \
		printf "  Black: ✓ Configured in pyproject.toml"; \
	else \
		printf "  Black: ○ Using defaults"; \
	fi
	@if grep -q "\[tool.pylint\]" pyproject.toml 2>/dev/null || [ -f .pylintrc ]; then \
		printf "  Pylint: ✓ Configured"; \
	else \
		printf "  Pylint: ○ Using defaults"; \
	fi
	@if grep -q "\[tool.mypy\]" pyproject.toml 2>/dev/null; then \
		printf "  MyPy: ✓ Configured in pyproject.toml"; \
	else \
		printf "  MyPy: ○ Using defaults"; \
	fi

quality-deps-install: ## ✅ Install additional quality dependencies
	@printf "\\033[0;34mInstalling additional quality dependencies...\\033[0m\\n"
	@printf "\\033[0;33mInstalling optional quality tools...\\033[0m\\n"
	@$(PIP) install ruff isort bandit safety pre-commit --quiet
	@printf "\\033[0;32m✓ Additional quality dependencies installed\\033[0m\\n"

# ============================================================================
# QUALITY CLEANUP AND MAINTENANCE
# ============================================================================

.PHONY: quality-clean quality-clean-reports quality-clean-cache

quality-clean: ## ✅ Clean quality tool artifacts and reports
	@printf "\\033[0;33mCleaning quality artifacts...\\033[0m\\n"
	@$(MAKE) quality-clean-reports
	@$(MAKE) quality-clean-cache
	@printf "\\033[0;32m✓ Quality cleanup completed\\033[0m\\n"

quality-clean-reports: ## ✅ Clean quality reports
	@printf "\\033[0;33mCleaning quality reports...\\033[0m\\n"
	@rm -f quality-report.md
	@rm -f pylint-report.txt
	@rm -f mypy-report.txt
	@rm -f bandit-report.json
	@rm -f safety-report.json
	@printf "\\033[0;32m✓ Quality reports cleaned\\033[0m\\n"

quality-clean-cache: ## ✅ Clean quality tool cache
	@printf "\\033[0;33mCleaning quality tool cache...\\033[0m\\n"
	@rm -rf .mypy_cache
	@rm -rf .ruff_cache
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@printf "\\033[0;32m✓ Quality cache cleaned\\033[0m\\n"

# ============================================================================
# VALIDATION WORKFLOWS
# ============================================================================

.PHONY: validate-all validate-ci validate-pre-push

validate-all: _load_env ## ⚙️ Execute complete validation pipeline
	@printf "\\033[0;34mRunning complete validation pipeline...\\033[0m\\n"
	@printf "\\033[0;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\033[0m\\n"
	@$(MAKE) quality
	@$(MAKE) test-coverage
	@$(MAKE) security-scan
	@printf "\\033[0;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\033[0m\\n"
	@printf "\\033[0;32m✓ Complete validation pipeline passed\\033[0m\\n"

validate-ci: _load_env ## ⚙️ Execute CI/CD validation checks
	@printf "\\033[0;34mRunning CI/CD validation...\\033[0m\\n"
	@$(MAKE) quality-check
	@$(MAKE) test-coverage
	@$(MAKE) security-scan
	@printf "\\033[0;32m✓ CI/CD validation completed\\033[0m\\n"

validate-pre-push: _load_env ## ⚙️ Execute pre-push validation
	@printf "\\033[0;34mRunning pre-push validation...\\033[0m\\n"
	@$(MAKE) quality-fix
	@$(MAKE) test
	@printf "\\033[0;32m✓ Pre-push validation completed\\033[0m\\n"

act-pr: _load_env ## ⚙️ Execute local GitHub Actions workflow using Act (cross-platform)
	@printf "\\033[0;34mRunning GitHub Actions workflow locally...\\033[0m\\n"
	@if [ "$(HAS_ACT)" != "yes" ]; then \
		printf "\033[0;31mError: 'act' is not installed\033[0m\n"; \
		printf "\033[0;33mInstall instructions:\033[0m\n"; \
		printf "\033[0;36m  macOS: brew install act\033[0m\n"; \
		printf "\033[0;36m  Linux: curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\033[0m\n"; \
		printf "\033[0;36m  Windows: choco install act-cli\033[0m\n"; \
		printf "\033[0;36m  Manual: https://github.com/nektos/act\033[0m\n"; \
		exit 1; \
	fi
	@printf "\\033[0;33mPlatform: $(PLATFORM_OS)/$(PLATFORM_ARCH)\\033[0m\\n"
ifeq ($(PLATFORM_OS),macos)
ifeq ($(PLATFORM_ARCH),arm64)
	@printf "\\033[0;36mRunning with linux/amd64 architecture for M-series Mac...\\033[0m\\n"
	@act pull_request --container-architecture linux/amd64
else
	@printf "\\033[0;36mRunning with default architecture...\\033[0m\\n"
	@act pull_request
endif
else
	@printf "\\033[0;36mRunning with default architecture...\\033[0m\\n"
	@act pull_request
endif
	@printf "\\033[0;32m✓ GitHub Actions workflow completed\\033[0m\\n"
