# ============================================================================
# CODE QUALITY, LINTING, AND VALIDATION
# ============================================================================
# This module handles code quality checks, linting, formatting, and validation
# with comprehensive cross-platform support
#
_check_mypy_deps: ## Internal: Check MyPy dependencies
	@$(PYTHON) -c "import mypy" 2>/dev/null || \
	(echo -e "$(RED)❌ MyPy not available. Run 'make install-test' first.$(NC)" && exit 1)ependencies: Makefile.platform, Makefile.env, Makefile.install
# ============================================================================

# Quality configuration
QUALITY_CONFIG_DIR := .

# Quality tool configuration files
BLACK_CONFIG := pyproject.toml
PYLINT_CONFIG := .pylintrc
MYPY_CONFIG := pyproject.toml
RUFF_CONFIG := pyproject.toml

# ============================================================================
# COMPREHENSIVE QUALITY SUITE
# ============================================================================

.PHONY: quality quality-fix quality-check quality-report

quality: _load_env ## ✅ Execute all code quality checks
	@echo -e "$(BLUE)Running comprehensive code quality suite...$(NC)"
	@echo -e "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	@$(MAKE) _check_quality_deps
	@echo -e "$(CYAN)STEP 1: Code Formatting Check$(NC)"
	@$(MAKE) black-check
	@echo -e "$(CYAN)STEP 2: Import Sorting Check$(NC)"
	@$(MAKE) isort-check 2>/dev/null || echo -e "$(YELLOW)⚠ isort not available$(NC)"
	@echo -e "$(CYAN)STEP 3: Linting Analysis$(NC)"
	@$(MAKE) pylint
	@echo -e "$(CYAN)STEP 4: Type Checking$(NC)"
	@$(MAKE) mypy
	@echo -e "$(CYAN)STEP 5: Security Scanning$(NC)"
	@$(MAKE) security-scan
	@echo -e "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	@echo -e "$(GREEN)✓ Code quality suite completed$(NC)"

quality-fix: _load_env ## ✅ Auto-fix code quality issues where possible
	@echo -e "$(BLUE)Auto-fixing code quality issues...$(NC)"
	@$(MAKE) _check_quality_deps
	@echo -e "$(YELLOW)Running Black formatter...$(NC)"
	@$(MAKE) black
	@echo -e "$(YELLOW)Running import sorting...$(NC)"
	@$(MAKE) isort 2>/dev/null || echo -e "$(YELLOW)⚠ isort not available$(NC)"
	@echo -e "$(YELLOW)Running Ruff auto-fixes...$(NC)"
	@$(MAKE) ruff-fix 2>/dev/null || echo -e "$(YELLOW)⚠ ruff not available$(NC)"
	@echo -e "$(GREEN)✓ Auto-fixes completed$(NC)"

quality-check: _load_env ## ✅ Validate code quality without making changes
	@echo -e "$(BLUE)Checking code quality (no modifications)...$(NC)"
	@$(MAKE) _check_quality_deps
	@$(MAKE) black-check
	@$(MAKE) pylint
	@$(MAKE) mypy
	@echo -e "$(GREEN)✓ Quality check completed$(NC)"

quality-report: _load_env ## ✅ Generate comprehensive quality report
	@echo -e "$(BLUE)Generating code quality report...$(NC)"
	@$(MAKE) _check_quality_deps
	@echo -e "$(YELLOW)Creating quality report...$(NC)"
	@echo "# Code Quality Report" > quality-report.md
	@echo "Generated on: $$(date)" >> quality-report.md
	@echo "" >> quality-report.md
	@echo "## Black Formatting Check" >> quality-report.md
	@$(MAKE) black-check >> quality-report.md 2>&1 || echo "Black check failed" >> quality-report.md
	@echo "" >> quality-report.md
	@echo "## Pylint Analysis" >> quality-report.md
	@$(MAKE) pylint >> quality-report.md 2>&1 || echo "Pylint analysis failed" >> quality-report.md
	@echo "" >> quality-report.md
	@echo "## MyPy Type Checking" >> quality-report.md
	@$(MAKE) mypy >> quality-report.md 2>&1 || echo "MyPy check failed" >> quality-report.md
	@echo -e "$(GREEN)✓ Quality report generated: quality-report.md$(NC)"

# ============================================================================
# BLACK CODE FORMATTING
# ============================================================================

.PHONY: black black-check black-diff

black: _load_env ## ✅ Format code with Black
	@echo -e "$(BLUE)Formatting code with Black...$(NC)"
	@$(MAKE) _check_black_deps
	@echo -e "$(YELLOW)Running Black formatter on source code...$(NC)"
	@$(PYTHON) -m black $(SRC_DIR) $(TEST_DIR) --config=$(BLACK_CONFIG) 2>/dev/null || \
	$(PYTHON) -m black $(SRC_DIR) $(TEST_DIR)
	@echo -e "$(GREEN)✓ Code formatting completed$(NC)"

black-check: _load_env ## ✅ Validate Black formatting without changes
	@echo -e "$(CYAN)Checking Black formatting...$(NC)"
	@$(MAKE) _check_black_deps
	@$(PYTHON) -m black --check $(SRC_DIR) $(TEST_DIR) --config=$(BLACK_CONFIG) 2>/dev/null || \
	$(PYTHON) -m black --check $(SRC_DIR) $(TEST_DIR) && \
	echo -e "$(GREEN)✓ Black formatting check passed$(NC)" || \
	(echo -e "$(RED)❌ Black formatting issues found$(NC)" && \
	 echo -e "$(CYAN)Fix with: make black$(NC)" && exit 1)

black-diff: _load_env ## ✅ Display Black formatting differences
	@echo -e "$(CYAN)Showing Black formatting differences...$(NC)"
	@$(MAKE) _check_black_deps
	@$(PYTHON) -m black --diff $(SRC_DIR) $(TEST_DIR) --config=$(BLACK_CONFIG) 2>/dev/null || \
	$(PYTHON) -m black --diff $(SRC_DIR) $(TEST_DIR)

# ============================================================================
# PYLINT STATIC ANALYSIS
# ============================================================================

.PHONY: pylint pylint-report pylint-config

pylint: _load_env ## ✅ Execute Pylint static analysis
	@echo -e "$(CYAN)Running Pylint static analysis...$(NC)"
	@$(MAKE) _check_pylint_deps
	@if [ -f $(PYLINT_CONFIG) ]; then \
		echo -e "$(YELLOW)Using Pylint configuration: $(PYLINT_CONFIG)$(NC)"; \
		$(PYTHON) -m pylint $(SRC_DIR) --rcfile=$(PYLINT_CONFIG); \
	else \
		echo -e "$(YELLOW)Using default Pylint configuration$(NC)"; \
		$(PYTHON) -m pylint $(SRC_DIR); \
	fi && \
	echo -e "$(GREEN)✓ Pylint analysis completed$(NC)" || \
	(echo -e "$(RED)❌ Pylint issues found$(NC)" && exit 1)

pylint-report: _load_env ## ✅ Generate detailed Pylint report
	@echo -e "$(BLUE)Generating detailed Pylint report...$(NC)"
	@$(MAKE) _check_pylint_deps
	@if [ -f $(PYLINT_CONFIG) ]; then \
		$(PYTHON) -m pylint $(SRC_DIR) --rcfile=$(PYLINT_CONFIG) --output-format=text > pylint-report.txt 2>&1; \
	else \
		$(PYTHON) -m pylint $(SRC_DIR) --output-format=text > pylint-report.txt 2>&1; \
	fi
	@echo -e "$(GREEN)✓ Pylint report generated: pylint-report.txt$(NC)"

pylint-config: ## ✅ Display Pylint configuration
	@echo -e "$(CYAN)Pylint Configuration:$(NC)"
	@if [ -f $(PYLINT_CONFIG) ]; then \
		echo -e "$(GREEN)✓ Configuration file: $(PYLINT_CONFIG)$(NC)"; \
		echo -e "$(YELLOW)Key settings:$(NC)"; \
		grep -E "^[a-z-]+" $(PYLINT_CONFIG) | head -10; \
	else \
		echo -e "$(YELLOW)⚠ No custom configuration file found$(NC)"; \
		echo -e "$(CYAN)Using default Pylint settings$(NC)"; \
	fi

# ============================================================================
# MYPY TYPE CHECKING
# ============================================================================

.PHONY: mypy mypy-report mypy-config

mypy: _load_env ## ✅ Execute MyPy type checking
	@echo -e "$(CYAN)Running MyPy type checking...$(NC)"
	@$(MAKE) _check_mypy_deps
	@if [ -f $(MYPY_CONFIG) ]; then \
		echo -e "$(YELLOW)Using MyPy configuration: $(MYPY_CONFIG)$(NC)"; \
		$(PYTHON) -m mypy $(SRC_DIR) --config-file=$(MYPY_CONFIG); \
	else \
		echo -e "$(YELLOW)Using default MyPy configuration$(NC)"; \
		$(PYTHON) -m mypy $(SRC_DIR); \
	fi && \
	echo -e "$(GREEN)✓ MyPy type checking completed$(NC)" || \
	(echo -e "$(RED)❌ MyPy type issues found$(NC)" && exit 1)

mypy-report: _load_env ## ✅ Generate MyPy report
	@echo -e "$(BLUE)Generating MyPy type checking report...$(NC)"
	@$(MAKE) _check_mypy_deps
	@if [ -f $(MYPY_CONFIG) ]; then \
		$(PYTHON) -m mypy $(SRC_DIR) --config-file=$(MYPY_CONFIG) > mypy-report.txt 2>&1; \
	else \
		$(PYTHON) -m mypy $(SRC_DIR) > mypy-report.txt 2>&1; \
	fi
	@echo -e "$(GREEN)✓ MyPy report generated: mypy-report.txt$(NC)"

mypy-config: ## ✅ Display MyPy configuration
	@echo -e "$(CYAN)MyPy Configuration:$(NC)"
	@if [ -f $(MYPY_CONFIG) ] && grep -q "\[tool.mypy\]" $(MYPY_CONFIG); then \
		echo -e "$(GREEN)✓ Configuration found in: $(MYPY_CONFIG)$(NC)"; \
		echo -e "$(YELLOW)MyPy settings:$(NC)"; \
		sed -n '/\[tool.mypy\]/,/^\[/p' $(MYPY_CONFIG) | head -10; \
	else \
		echo -e "$(YELLOW)⚠ No MyPy configuration found$(NC)"; \
		echo -e "$(CYAN)Using default MyPy settings$(NC)"; \
	fi

# ============================================================================
# RUFF LINTING AND FORMATTING
# ============================================================================

.PHONY: ruff ruff-check ruff-fix

ruff: _load_env ## ✅ Execute Ruff linting
	@echo -e "$(CYAN)Running Ruff linting...$(NC)"
	@$(MAKE) _check_ruff_deps
	@$(PYTHON) -m ruff check $(SRC_DIR) $(TEST_DIR) && \
	echo -e "$(GREEN)✓ Ruff linting completed$(NC)" || \
	(echo -e "$(RED)❌ Ruff issues found$(NC)" && \
	 echo -e "$(CYAN)Fix with: make ruff-fix$(NC)" && exit 1)

ruff-check: _load_env ## ✅ Validate with Ruff without fixing
	@echo -e "$(CYAN)Checking code with Ruff...$(NC)"
	@$(MAKE) _check_ruff_deps
	@$(PYTHON) -m ruff check $(SRC_DIR) $(TEST_DIR) --no-fix

ruff-fix: _load_env ## ✅ Auto-fix Ruff issues
	@echo -e "$(BLUE)Auto-fixing Ruff issues...$(NC)"
	@$(MAKE) _check_ruff_deps
	@$(PYTHON) -m ruff check $(SRC_DIR) $(TEST_DIR) --fix
	@echo -e "$(GREEN)✓ Ruff auto-fixes completed$(NC)"

# ============================================================================
# IMPORT SORTING
# ============================================================================

.PHONY: isort isort-check isort-diff

isort: _load_env ## ✅ Sort imports with isort
	@echo -e "$(BLUE)Sorting imports with isort...$(NC)"
	@$(MAKE) _check_isort_deps
	@$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR) --profile black
	@echo -e "$(GREEN)✓ Import sorting completed$(NC)"

isort-check: _load_env ## ✅ Validate import sorting without changes
	@echo -e "$(CYAN)Checking import sorting...$(NC)"
	@$(MAKE) _check_isort_deps
	@$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR) --profile black --check-only && \
	echo -e "$(GREEN)✓ Import sorting check passed$(NC)" || \
	(echo -e "$(RED)❌ Import sorting issues found$(NC)" && \
	 echo -e "$(CYAN)Fix with: make isort$(NC)" && exit 1)

isort-diff: _load_env ## ✅ Display import sorting differences
	@echo -e "$(CYAN)Showing import sorting differences...$(NC)"
	@$(MAKE) _check_isort_deps
	@$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR) --profile black --diff

# ============================================================================
# SECURITY SCANNING
# ============================================================================

.PHONY: security-scan security-bandit security-safety

security-scan: _load_env ## ⚙️ Execute comprehensive security scanning
	@echo -e "$(BLUE)Running security vulnerability scanning...$(NC)"
	@echo -e "$(YELLOW)Running Bandit security scanner...$(NC)"
	@$(MAKE) security-bandit
	@echo -e "$(YELLOW)Running Safety dependency scanner...$(NC)"
	@$(MAKE) security-safety
	@echo -e "$(GREEN)✓ Security scanning completed$(NC)"

security-bandit: _load_env ## ⚙️ Execute Bandit security scanner
	@echo -e "$(CYAN)Running Bandit security analysis...$(NC)"
	@if $(PYTHON) -c "import bandit" 2>/dev/null; then \
		$(PYTHON) -m bandit -r $(SRC_DIR) -f json -o bandit-report.json 2>/dev/null || \
		$(PYTHON) -m bandit -r $(SRC_DIR); \
		echo -e "$(GREEN)✓ Bandit security scan completed$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠ Bandit not available. Install with: pip install bandit$(NC)"; \
		echo -e "$(CYAN)Run 'make install-test' to get all development tools$(NC)"; \
	fi

security-safety: _load_env ## ⚙️ Execute Safety dependency vulnerability scanner
	@echo -e "$(CYAN)Running Safety dependency scan...$(NC)"
	@if $(PYTHON) -c "import safety" 2>/dev/null; then \
		$(PYTHON) -m safety check --json --output safety-report.json 2>/dev/null || \
		$(PYTHON) -m safety check; \
		echo -e "$(GREEN)✓ Safety dependency scan completed$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠ Safety not available. Install with: pip install safety$(NC)"; \
		echo -e "$(CYAN)Run 'make install-test' to get all development tools$(NC)"; \
	fi

# ============================================================================
# PRE-COMMIT HOOKS
# ============================================================================

.PHONY: pre-commit pre-commit-install pre-commit-run

pre-commit: _load_env ## ⚙️ Execute pre-commit hooks on all files
	@echo -e "$(CYAN)Running pre-commit hooks...$(NC)"
	@if $(PYTHON) -c "import pre_commit" 2>/dev/null; then \
		$(PYTHON) -m pre_commit run --all-files; \
		echo -e "$(GREEN)✓ Pre-commit hooks completed$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠ pre-commit not available$(NC)"; \
		echo -e "$(CYAN)Running individual quality tools instead...$(NC)"; \
		$(MAKE) quality-fix; \
	fi

pre-commit-install: _load_env ## 📦 Install pre-commit hooks
	@echo -e "$(BLUE)Installing pre-commit hooks...$(NC)"
	@if $(PYTHON) -c "import pre_commit" 2>/dev/null; then \
		$(PYTHON) -m pre_commit install; \
		echo -e "$(GREEN)✓ Pre-commit hooks installed$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠ pre-commit not available. Install with: pip install pre-commit$(NC)"; \
		echo -e "$(CYAN)Run 'make install-test' to get all development tools$(NC)"; \
	fi

pre-commit-run: _load_env ## ⚙️ Execute pre-commit hooks on staged files
	@echo -e "$(CYAN)Running pre-commit on staged files...$(NC)"
	@if $(PYTHON) -c "import pre_commit" 2>/dev/null; then \
		$(PYTHON) -m pre_commit run; \
	else \
		echo -e "$(YELLOW)⚠ pre-commit not available, running quality checks...$(NC)"; \
		$(MAKE) quality-check; \
	fi; \
	echo -e "$(GREEN)✓ Pre-commit workflow completed$(NC)"

# ============================================================================
# QUALITY TOOL DEPENDENCY CHECKS
# ============================================================================

.PHONY: _check_black_deps _check_pylint_deps _check_mypy_deps _check_ruff_deps _check_isort_deps

_check_black_deps: ## Internal: Check Black dependencies
	@$(PYTHON) -c "import black" 2>/dev/null || \
	(echo -e "$(RED)❌ Black not available. Run 'make install-test' first.$(NC)" && exit 1)

_check_pylint_deps: ## Internal: Check Pylint dependencies
	@$(PYTHON) -c "import pylint" 2>/dev/null || \
	(echo -e "$(RED)❌ Pylint not available. Run 'make install-test' first.$(NC)" && exit 1)

_check_mypy_deps: ## Internal: Check MyPy dependencies
	@$(PYTHON) -c "import mypy" 2>/dev/null || \
	(echo -e "$(RED)❌ MyPy not available. Run 'make install-dev' first.$(NC)" && exit 1)

_check_ruff_deps: ## Internal: Check Ruff dependencies
	@$(PYTHON) -c "import ruff" 2>/dev/null || \
	(echo -e "$(YELLOW)⚠ Ruff not available. Install with: pip install ruff$(NC)" && exit 1)

_check_isort_deps: ## Internal: Check isort dependencies
	@$(PYTHON) -c "import isort" 2>/dev/null || \
	(echo -e "$(YELLOW)⚠ isort not available. Install with: pip install isort$(NC)" && exit 1)

# ============================================================================
# QUALITY INFORMATION AND CONFIGURATION
# ============================================================================

.PHONY: quality-info quality-config quality-deps-install

quality-info: ## ✅ Display code quality tool information
	@echo -e "$(CYAN)Code Quality Tools Information:$(NC)"
	@echo -e "$(YELLOW)Core Quality Tools:$(NC)"
	@$(PYTHON) -c "import black; print(f'  ✓ Black {black.__version__}')" 2>/dev/null || echo "  ❌ Black not available"
	@$(PYTHON) -c "import pylint; print(f'  ✓ Pylint {pylint.__version__}')" 2>/dev/null || echo "  ❌ Pylint not available"
	@$(PYTHON) -c "import mypy; print(f'  ✓ MyPy {mypy.__version__}')" 2>/dev/null || echo "  ❌ MyPy not available"
	@echo -e "$(YELLOW)Optional Quality Tools:$(NC)"
	@$(PYTHON) -c "import ruff; print(f'  ✓ Ruff {ruff.__version__}')" 2>/dev/null || echo "  ○ Ruff not available"
	@$(PYTHON) -c "import isort; print(f'  ✓ isort {isort.__version__}')" 2>/dev/null || echo "  ○ isort not available"
	@$(PYTHON) -c "import bandit; print(f'  ✓ Bandit {bandit.__version__}')" 2>/dev/null || echo "  ○ Bandit not available"
	@$(PYTHON) -c "import safety; print(f'  ✓ Safety {safety.__version__}')" 2>/dev/null || echo "  ○ Safety not available"
	@$(PYTHON) -c "import pre_commit; print(f'  ✓ pre-commit {pre_commit.__version__}')" 2>/dev/null || echo "  ○ pre-commit not available"

quality-config: ## ✅ Display quality tool configuration files
	@echo -e "$(CYAN)Quality Tool Configuration:$(NC)"
	@echo -e "$(YELLOW)Configuration Files:$(NC)"
	@echo -e "  pyproject.toml: $(if $(wildcard pyproject.toml),✓ Present,❌ Missing)"
	@echo -e "  .pylintrc: $(if $(wildcard .pylintrc),✓ Present,○ Optional)"
	@echo -e "  .pre-commit-config.yaml: $(if $(wildcard .pre-commit-config.yaml),✓ Present,○ Optional)"
	@echo -e "  setup.cfg: $(if $(wildcard setup.cfg),✓ Present,○ Optional)"
	@echo -e "$(YELLOW)Tool Configurations:$(NC)"
	@if grep -q "\[tool.black\]" pyproject.toml 2>/dev/null; then \
		echo -e "  Black: ✓ Configured in pyproject.toml"; \
	else \
		echo -e "  Black: ○ Using defaults"; \
	fi
	@if grep -q "\[tool.pylint\]" pyproject.toml 2>/dev/null || [ -f .pylintrc ]; then \
		echo -e "  Pylint: ✓ Configured"; \
	else \
		echo -e "  Pylint: ○ Using defaults"; \
	fi
	@if grep -q "\[tool.mypy\]" pyproject.toml 2>/dev/null; then \
		echo -e "  MyPy: ✓ Configured in pyproject.toml"; \
	else \
		echo -e "  MyPy: ○ Using defaults"; \
	fi

quality-deps-install: ## ✅ Install additional quality dependencies
	@echo -e "$(BLUE)Installing additional quality dependencies...$(NC)"
	@echo -e "$(YELLOW)Installing optional quality tools...$(NC)"
	@$(PIP) install ruff isort bandit safety pre-commit --quiet
	@echo -e "$(GREEN)✓ Additional quality dependencies installed$(NC)"

# ============================================================================
# QUALITY CLEANUP AND MAINTENANCE
# ============================================================================

.PHONY: quality-clean quality-clean-reports quality-clean-cache

quality-clean: ## ✅ Clean quality tool artifacts and reports
	@echo -e "$(YELLOW)Cleaning quality artifacts...$(NC)"
	@$(MAKE) quality-clean-reports
	@$(MAKE) quality-clean-cache
	@echo -e "$(GREEN)✓ Quality cleanup completed$(NC)"

quality-clean-reports: ## ✅ Clean quality reports
	@echo -e "$(YELLOW)Cleaning quality reports...$(NC)"
	@rm -f quality-report.md
	@rm -f pylint-report.txt
	@rm -f mypy-report.txt
	@rm -f bandit-report.json
	@rm -f safety-report.json
	@echo -e "$(GREEN)✓ Quality reports cleaned$(NC)"

quality-clean-cache: ## ✅ Clean quality tool cache
	@echo -e "$(YELLOW)Cleaning quality tool cache...$(NC)"
	@rm -rf .mypy_cache
	@rm -rf .ruff_cache
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo -e "$(GREEN)✓ Quality cache cleaned$(NC)"

# ============================================================================
# VALIDATION WORKFLOWS
# ============================================================================

.PHONY: validate-all validate-ci validate-pre-push

validate-all: _load_env ## ⚙️ Execute complete validation pipeline
	@echo -e "$(BLUE)Running complete validation pipeline...$(NC)"
	@echo -e "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	@$(MAKE) quality
	@$(MAKE) test-coverage
	@$(MAKE) security-scan
	@echo -e "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)"
	@echo -e "$(GREEN)✓ Complete validation pipeline passed$(NC)"

validate-ci: _load_env ## ⚙️ Execute CI/CD validation checks
	@echo -e "$(BLUE)Running CI/CD validation...$(NC)"
	@$(MAKE) quality-check
	@$(MAKE) test-coverage
	@$(MAKE) security-scan
	@echo -e "$(GREEN)✓ CI/CD validation completed$(NC)"

validate-pre-push: _load_env ## ⚙️ Execute pre-push validation
	@echo -e "$(BLUE)Running pre-push validation...$(NC)"
	@$(MAKE) quality-fix
	@$(MAKE) test
	@echo -e "$(GREEN)✓ Pre-push validation completed$(NC)"

act-pr: _load_env ## ⚙️ Execute local GitHub Actions workflow using Act (cross-platform)
	@echo -e "$(BLUE)Running GitHub Actions workflow locally...$(NC)"
	@if [ "$(HAS_ACT)" != "yes" ]; then \
		echo -e "$(RED)Error: 'act' is not installed$(NC)"; \
		echo -e "$(YELLOW)Install instructions:$(NC)"; \
		echo -e "$(CYAN)  macOS: brew install act$(NC)"; \
		echo -e "$(CYAN)  Linux: curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash$(NC)"; \
		echo -e "$(CYAN)  Windows: choco install act-cli$(NC)"; \
		echo -e "$(CYAN)  Manual: https://github.com/nektos/act$(NC)"; \
		exit 1; \
	fi
	@echo -e "$(YELLOW)Platform: $(PLATFORM_OS)/$(PLATFORM_ARCH)$(NC)"
ifeq ($(PLATFORM_OS),Darwin)
ifeq ($(PLATFORM_ARCH),arm64)
	@echo -e "$(CYAN)Running with linux/amd64 architecture for M-series Mac...$(NC)"
	@act pull_request --container-architecture linux/amd64
else
	@echo -e "$(CYAN)Running with default architecture...$(NC)"
	@act pull_request
endif
else
	@echo -e "$(CYAN)Running with default architecture...$(NC)"
	@act pull_request
endif
	@echo -e "$(GREEN)✓ GitHub Actions workflow completed$(NC)"
