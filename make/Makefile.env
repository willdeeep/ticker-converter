# ============================================================================
# ENVIRONMENT SETUP & VALIDATION
# ============================================================================
# This module handles cross-platform environment setup, validation, and
# Python virtual environment management
#
# Dependencies: Makefile.platform (for platform detection)
# ============================================================================

# Environment configuration
PACKAGE_NAME := ticker_converter
VENV_NAME := .venv

# Cross-platform virtual environment paths (conditional assignment)
VENV_PATH ?= $(VENV_NAME)

ifeq ($(PLATFORM_FAMILY),unix)
    VENV_BIN ?= $(VENV_PATH)/bin
    VENV_PYTHON ?= $(VENV_BIN)/python
    VENV_PIP ?= $(VENV_BIN)/pip
    VENV_ACTIVATE ?= source $(VENV_BIN)/activate
else
    VENV_BIN ?= $(VENV_PATH)/Scripts
    VENV_PYTHON ?= $(VENV_BIN)/python.exe
    VENV_PIP ?= $(VENV_BIN)/pip.exe
    VENV_ACTIVATE ?= $(VENV_BIN)/activate.bat
endif

# Python executable for project (use virtual environment if available)
ifeq ($(shell test -f $(VENV_PYTHON) && echo "yes"),yes)
    PYTHON ?= $(VENV_PYTHON)
    PIP ?= $(VENV_PIP)
else
    PYTHON ?= $(PYTHON_CMD)
    PIP ?= $(PIP_CMD)
endif

# ============================================================================
# ENVIRONMENT VALIDATION FUNCTIONS
# ============================================================================

# Function to validate individual environment variables
# Usage: $(call check_var,VARIABLE_NAME)
# Fails if variable is empty or contains placeholder values
define check_var
	if [ -z "$${$(1)}" ] || [ "$${$(1)}" = "your_alpha_vantage_api_key_here" ] || [ "$${$(1)}" = "your-secure-jwt-secret-key-change-for-production" ]; then \
		printf "\033[0;31m✗ Error: Required variable $(1) needs customization in .env\033[0m\n"; \
		printf "\033[0;33mPlease edit .env and set a proper value for $(1)\033[0m\n"; \
		printf "\033[0;36mHint: Check .env.example for guidance\033[0m\n"; \
		exit 1; \
	fi
endef

# Function to check if .env file exists
define check_env_file
	if [ ! -f .env ]; then \
		printf "\033[0;31mError: .env file not found. Run 'make setup' first.\033[0m\n"; \
		printf "\033[0;33mTip: Copy .env.example to .env and customize the values\033[0m\n"; \
		exit 1; \
	fi
endef

# ============================================================================
# PYTHON ENVIRONMENT MANAGEMENT
# ============================================================================

.PHONY: _setup_python_environment _create_venv _install_python _check_python_version

_setup_python_environment: ## Internal: Setup Python environment with pyenv and virtual environment
	@printf "\033[0;34mSetting up Python environment...\033[0m\n"
	@$(MAKE) _check_python_version
	@$(MAKE) _install_python
	@$(MAKE) _create_venv
	@printf "\033[0;32mPython environment setup completed\033[0m\n"

_check_python_version: ## Internal: Check if required Python version is available
	@printf "\033[0;33mChecking Python version requirements...\033[0m\n"
ifeq ($(HAS_PYTHON),no)
	@printf "\033[0;31mError: Python not found. Please install Python first.\033[0m\n"
	@$(MAKE) _suggest_python_installation
	@exit 1
endif
	@if ! $(PYTHON_CMD) -c "import sys; sys.exit(0 if sys.version_info >= (3, 11) else 1)" 2>/dev/null; then \
		printf "\033[0;33mWarning: Python 3.11+ recommended for optimal compatibility\033[0m\n"; \
		printf "\033[0;36mCurrent version: $$($(PYTHON_CMD) --version 2>/dev/null || echo 'Unknown')\033[0m\n"; \
	else \
		printf "\033[0;32m✓ Python version check passed\033[0m\n"; \
	fi

_install_python: ## Internal: Install Python if needed using platform-specific methods
ifeq ($(HAS_PYENV),yes)
	@printf "\033[0;33mChecking Python 3.11.12 availability with pyenv...\033[0m\n"
	@if ! pyenv versions --bare | grep -q "^3.11.12$$"; then \
		printf "\033[0;33mPython 3.11.12 not found. Installing via pyenv...\033[0m\n"; \
		pyenv install 3.11.12; \
	else \
		printf "\033[0;32mPython 3.11.12 is already installed\033[0m\n"; \
	fi
	@printf "\033[0;33mSetting local Python version to 3.11.12...\033[0m\n"
	@pyenv local 3.11.12
else
	@printf "\033[0;33mpyenv not available, using system Python\033[0m\n"
	@$(MAKE) _suggest_pyenv_installation
endif

_create_venv: ## Internal: Create virtual environment if it doesn't exist
	@printf "\033[0;33mSetting up virtual environment...\033[0m\n"
	@if [ ! -d "$(VENV_PATH)" ]; then \
		printf "\033[0;33mCreating virtual environment at $(VENV_PATH)...\033[0m\n"; \
		$(PYTHON_CMD) -m venv $(VENV_PATH); \
		printf "\033[0;32mVirtual environment created\033[0m\n"; \
	else \
		printf "\033[0;32mVirtual environment already exists\033[0m\n"; \
	fi
	@printf "\033[0;33mUpgrading pip in virtual environment...\033[0m\n"
	@$(VENV_PYTHON) -m pip install --upgrade pip --quiet

_suggest_python_installation: ## Internal: Suggest Python installation methods
	@printf "\033[0;36mTo install Python:\033[0m\n"
ifeq ($(PLATFORM_OS),macos)
	@printf "\033[0;33m  1. Install pyenv: brew install pyenv\033[0m\n"
	@printf "\033[0;33m  2. Install Python: pyenv install 3.11.12\033[0m\n"
	@printf "\033[0;33m  3. Alternative: brew install python@3.11\033[0m\n"
else ifeq ($(PLATFORM_OS),linux)
	@printf "\033[0;33m  1. Install pyenv: curl https://pyenv.run | bash\033[0m\n"
	@printf "\033[0;33m  2. Install Python: pyenv install 3.11.12\033[0m\n"
	@printf "\033[0;33m  3. Alternative: $(PACKAGE_INSTALL) python3 python3-venv\033[0m\n"
else
	@printf "\033[0;33m  1. Download from: https://www.python.org/downloads/\033[0m\n"
	@printf "\033[0;33m  2. Or install via Chocolatey: choco install python\033[0m\n"
endif

_suggest_pyenv_installation: ## Internal: Suggest pyenv installation for better Python management
	@printf "\033[0;36mFor better Python version management, consider installing pyenv:\033[0m\n"
ifeq ($(PLATFORM_OS),macos)
	@printf "\033[0;33m  brew install pyenv\033[0m\n"
	@printf "\033[0;33m  echo 'eval \\n"\$$(pyenv init -)\"' >> ~/.zshrc\033[0m\n"
else ifeq ($(PLATFORM_OS),linux)
	@printf "\033[0;33m  curl https://pyenv.run | bash\033[0m\n"
	@printf "\033[0;33m  # Add pyenv to your shell profile\033[0m\n"
else
	@printf "\033[0;33m  # pyenv-win available for Windows\033[0m\n"
endif

# ============================================================================
# ENVIRONMENT FILE MANAGEMENT
# ============================================================================

.PHONY: _load_env _validate_env _create_env_from_example

_load_env: ## Internal: Load and export environment variables
	@$(call check_env_file)

_validate_env: _load_env ## Internal: Validate required environment variables
	@printf "\033[0;33mValidating environment variables...\033[0m\n"
	@set -a && . ./.env && set +a && \
	$(call check_var,POSTGRES_HOST) && \
	$(call check_var,POSTGRES_PORT) && \
	$(call check_var,POSTGRES_DB) && \
	$(call check_var,POSTGRES_USER) && \
	$(call check_var,POSTGRES_PASSWORD) && \
	$(call check_var,AIRFLOW_ADMIN_USERNAME) && \
	$(call check_var,AIRFLOW_ADMIN_PASSWORD) && \
	$(call check_var,AIRFLOW_ADMIN_EMAIL) && \
	$(call check_var,AIRFLOW_ADMIN_FIRSTNAME) && \
	$(call check_var,AIRFLOW_ADMIN_LASTNAME) && \
	$(call check_var,ALPHA_VANTAGE_API_KEY) && \
	printf "\033[0;32m✓ Environment validation passed\033[0m\n"

_create_env_from_example: ## Internal: Create .env from .env.example with user guidance
	@if [ ! -f .env ]; then \
		printf "\033[0;33mPlease customize .env.example with your values:\033[0m\n"; \
		printf "\033[0;36m  • ALPHA_VANTAGE_API_KEY: Get from https://www.alphavantage.co/support/#api-key\033[0m\n"; \
		printf "\033[0;36m  • Database credentials: Set your PostgreSQL configuration\033[0m\n"; \
		printf "\033[0;36m  • Airflow admin: Set your preferred admin username/password\033[0m\n"; \
		printf "\033[0;36m  • JWT secret: Change from default for security\033[0m\n"; \
		printf ""; \
		printf "\033[0;33mPress Enter after customizing .env.example to continue...\033[0m\n"; \
		read -p ""; \
		cp .env.example .env; \
		printf "\033[0;32m✓ Copied customized .env.example to .env\033[0m\n"; \
	else \
		printf "\033[0;32m✓ .env file already exists\033[0m\n"; \
	fi

# ============================================================================
# ENVIRONMENT SETUP WORKFLOW
# ============================================================================

.PHONY: setup _setup_header _setup_steps _setup_footer

setup: ## 📦 Initialize project and basic environment (environment variables)
	@$(MAKE) _setup_header
	@$(MAKE) _setup_steps
	@$(MAKE) _setup_footer

_setup_header: ## Internal: Display setup header
	@printf "\033[0;34mSetting up ticker-converter project environment...\033[0m\n"
	@printf "\033[0;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m\n"

_setup_steps: ## Internal: Execute setup configuration steps
	@printf "\033[0;36mSTEP 1: Platform Detection\033[0m\n"
	@$(MAKE) platform-info
	@printf "\033[0;36mSTEP 2: Customize Environment Configuration\033[0m\n"
	@printf "\033[0;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m\n"
	@$(MAKE) _create_env_from_example
	@printf "\033[0;36mSTEP 3: Validate Configuration\033[0m\n"
	@$(MAKE) _validate_env
	@printf "\033[0;36mSTEP 4: Setup Python Environment\033[0m\n"
	@$(MAKE) _setup_python_environment

_setup_footer: ## Internal: Display setup completion message
	@printf "\033[0;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m\n"
	@printf "\033[0;32m✓ Environment setup completed!\033[0m\n"
	@printf "\033[0;36mPlatform: $(PLATFORM_OS) ($(PLATFORM_ARCH))\033[0m\n"
	@printf "\033[0;36mPython: $(PYTHON) (Virtual Environment: $(shell test -f $(VENV_PYTHON) && echo \n"Active" || echo "Not Active"))\033[0m\n"
	@printf "\033[0;36mNext steps:\033[0m\n"
	@printf "\033[0;33m  • Production runtime: make install\033[0m\n"
	@printf "\033[0;33m  • Testing workflow: make install-test\033[0m\n"
	@printf "\033[0;33m  • Development work: make install-test\033[0m\n"
	@printf "\033[0;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m\n"

# ============================================================================
# ENVIRONMENT DEBUGGING AND INSPECTION
# ============================================================================

.PHONY: env-info env-debug env-test

env-info: ## 🔧 Display current environment configuration
	@printf "\033[0;36mEnvironment Configuration:\033[0m\n"
	@printf "\033[0;33mProject:\033[0m $(PACKAGE_NAME)\n"
	@printf "\033[0;33mVirtual Environment:\033[0m $(VENV_PATH)\n"
	@printf "\033[0;33mPython Executable:\033[0m $(PYTHON)\n"
	@printf "\033[0;33mPip Executable:\033[0m $(PIP)\n"
	@printf "\033[0;33mEnvironment File:\033[0m $(if $(wildcard .env),✓ Present,❌ Missing)\n"

env-debug: ## 🔧 Display detailed environment debug information
	@printf "\033[0;36mEnvironment Debug Information:\033[0m\n"
	@printf "\033[0;33mVirtual Environment Path:\033[0m $(VENV_PATH)\n"
	@printf "\033[0;33mVirtual Environment Bin:\033[0m $(VENV_BIN)\n"
	@printf "\033[0;33mVirtual Environment Python:\033[0m $(VENV_PYTHON)\n"
	@printf "\033[0;33mVirtual Environment Active:\033[0m $(shell test -f $(VENV_PYTHON) && echo \n"Yes" || echo "No")"
	@printf "\033[0;33mCurrent Python:\033[0m $(shell which $(PYTHON) 2>/dev/null || echo \n"Not Found")"
	@printf "\033[0;33mPython Version:\033[0m $(shell $(PYTHON) --version 2>/dev/null || echo \n"Not Available")"
	@printf "\033[0;33mPip Version:\033[0m $(shell $(PIP) --version 2>/dev/null || echo \n"Not Available")"
	@echo ""
	@if [ -f .env ]; then \
		printf "\033[0;36mEnvironment Variables (from .env):\033[0m\n"; \
		grep -E "^[A-Z_]+" .env | head -10 | while read line; do \
		var_name=$$(echo $$line | cut -d'=' -f1); \
		printf "\033[0;33m$$var_name:\033[0m Set"; \
	done; \
	else \
		printf "\033[0;31m.env file not found\033[0m\n"; \
	fi

env-test: ## 🧪 Execute tests environment setup and validation
	@printf "\033[0;36mTesting Environment Setup...\033[0m\n"
	@printf "\033[0;33m1. Testing Python environment...\033[0m\n"
	@$(PYTHON) -c "import sys; print(f'Python {sys.version}')"
	@printf "\033[0;33m2. Testing pip functionality...\033[0m\n"
	@$(PIP) --version
	@printf "\033[0;33m3. Testing virtual environment...\033[0m\n"
	@if [ -f $(VENV_PYTHON) ]; then \
		printf "\033[0;32m✓ Virtual environment is active\033[0m\n"; \
	else \
		printf "\033[0;33m⚠ Virtual environment not found\033[0m\n"; \
	fi
	@printf "\033[0;33m4. Testing environment variables...\033[0m\n"
	@$(MAKE) _load_env && printf "\033[0;32m✓ Environment file loaded\033[0m\n"
	@printf "\033[0;32mEnvironment test completed\033[0m\n"

# ============================================================================
# PUBLIC ENVIRONMENT TARGETS
# ============================================================================

.PHONY: setup-env validate-env validate-tools

setup-env: ## 🔧 Setup complete environment configuration
	@printf "\033[0;34mSetting up environment configuration...\033[0m\n"
	@$(MAKE) _setup_steps
	@$(MAKE) _setup_footer

validate-env: ## ✓ Validate environment configuration and dependencies
	@printf "\033[0;34mValidating environment...\033[0m\n"
	@$(MAKE) _validate_env
	@$(MAKE) env-test
	@printf "\033[0;32m✓ Environment validation completed\033[0m\n"

validate-tools: ## ✓ Validate that essential development tools are available
	@printf "\033[0;34mValidating development tools...\033[0m\n"
	@$(MAKE) check-tools
	@printf "\033[0;32m✓ Tool validation completed\033[0m\n"

# Export environment variables for use in other modules
export PACKAGE_NAME
export VENV_PATH
export VENV_PYTHON
export VENV_PIP
export PYTHON
export PIP
