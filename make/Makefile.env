# ============================================================================
# ENVIRONMENT SETUP & VALIDATION
# ============================================================================
# This module handles cross-platform environment setup, validation, and
# Python virtual environment management
#
# Dependencies: Makefile.platform (for platform detection)
# ============================================================================

# Environment configuration
PACKAGE_NAME := ticker_converter
VENV_NAME := .venv

# Cross-platform virtual environment paths (conditional assignment)
VENV_PATH ?= $(VENV_NAME)

ifeq ($(PLATFORM_FAMILY),unix)
    VENV_BIN ?= $(VENV_PATH)/bin
    VENV_PYTHON ?= $(VENV_BIN)/python
    VENV_PIP ?= $(VENV_BIN)/pip
    VENV_ACTIVATE ?= source $(VENV_BIN)/activate
else
    VENV_BIN ?= $(VENV_PATH)/Scripts
    VENV_PYTHON ?= $(VENV_BIN)/python.exe
    VENV_PIP ?= $(VENV_BIN)/pip.exe
    VENV_ACTIVATE ?= $(VENV_BIN)/activate.bat
endif

# Python executable for project (use virtual environment if available)
ifeq ($(shell test -f $(VENV_PYTHON) && echo "yes"),yes)
    PYTHON ?= $(VENV_PYTHON)
    PIP ?= $(VENV_PIP)
else
    PYTHON ?= $(PYTHON_CMD)
    PIP ?= $(PIP_CMD)
endif

# ============================================================================
# ENVIRONMENT VALIDATION FUNCTIONS
# ============================================================================

# Function to validate individual environment variables
# Usage: $(call check_var,VARIABLE_NAME)
# Fails if variable is empty or contains placeholder values
define check_var
	if [ -z "$${$(1)}" ] || [ "$${$(1)}" = "your_alpha_vantage_api_key_here" ] || [ "$${$(1)}" = "your-secure-jwt-secret-key-change-for-production" ]; then \
		echo -e "$(RED)✗ Error: Required variable $(1) needs customization in .env$(NC)"; \
		echo -e "$(YELLOW)Please edit .env and set a proper value for $(1)$(NC)"; \
		echo -e "$(CYAN)Hint: Check .env.example for guidance$(NC)"; \
		exit 1; \
	fi
endef

# Function to check if .env file exists
define check_env_file
	if [ ! -f .env ]; then \
		echo -e "$(RED)Error: .env file not found. Run 'make setup' first.$(NC)"; \
		echo -e "$(YELLOW)Tip: Copy .env.example to .env and customize the values$(NC)"; \
		exit 1; \
	fi
endef

# ============================================================================
# PYTHON ENVIRONMENT MANAGEMENT
# ============================================================================

.PHONY: _setup_python_environment _create_venv _install_python _check_python_version

_setup_python_environment: ## Internal: Setup Python environment with pyenv and virtual environment
	@$(ECHO_CMD) "$(BLUE)Setting up Python environment...$(NC)\n"
	@$(MAKE) _check_python_version
	@$(MAKE) _install_python
	@$(MAKE) _create_venv
	@$(ECHO_CMD) "$(GREEN)Python environment setup completed$(NC)\n"

_check_python_version: ## Internal: Check if required Python version is available
	@$(ECHO_CMD) "$(YELLOW)Checking Python version requirements...$(NC)\n"
ifeq ($(HAS_PYTHON),no)
	@$(ECHO_CMD) "$(RED)Error: Python not found. Please install Python first.$(NC)\n"
	@$(MAKE) _suggest_python_installation
	@exit 1
endif
	@if ! $(PYTHON_CMD) -c "import sys; sys.exit(0 if sys.version_info >= (3, 11) else 1)" 2>/dev/null; then \
		echo -e "$(YELLOW)Warning: Python 3.11+ recommended for optimal compatibility$(NC)"; \
		echo -e "$(CYAN)Current version: $$($(PYTHON_CMD) --version 2>/dev/null || echo 'Unknown')$(NC)"; \
	else \
		echo -e "$(GREEN)✓ Python version check passed$(NC)"; \
	fi

_install_python: ## Internal: Install Python if needed using platform-specific methods
ifeq ($(HAS_PYENV),yes)
	@$(ECHO_CMD) "$(YELLOW)Checking Python 3.11.12 availability with pyenv...$(NC)\n"
	@if ! pyenv versions --bare | grep -q "^3.11.12$$"; then \
		echo -e "$(YELLOW)Python 3.11.12 not found. Installing via pyenv...$(NC)"; \
		pyenv install 3.11.12; \
	else \
		echo -e "$(GREEN)Python 3.11.12 is already installed$(NC)"; \
	fi
	@$(ECHO_CMD) "$(YELLOW)Setting local Python version to 3.11.12...$(NC)\n"
	@pyenv local 3.11.12
else
	@$(ECHO_CMD) "$(YELLOW)pyenv not available, using system Python$(NC)\n"
	@$(MAKE) _suggest_pyenv_installation
endif

_create_venv: ## Internal: Create virtual environment if it doesn't exist
	@$(ECHO_CMD) "$(YELLOW)Setting up virtual environment...$(NC)\n"
	@if [ ! -d "$(VENV_PATH)" ]; then \
		echo -e "$(YELLOW)Creating virtual environment at $(VENV_PATH)...$(NC)"; \
		$(PYTHON_CMD) -m venv $(VENV_PATH); \
		echo -e "$(GREEN)Virtual environment created$(NC)"; \
	else \
		echo -e "$(GREEN)Virtual environment already exists$(NC)"; \
	fi
	@$(ECHO_CMD) "$(YELLOW)Upgrading pip in virtual environment...$(NC)\n"
	@$(VENV_PYTHON) -m pip install --upgrade pip --quiet

_suggest_python_installation: ## Internal: Suggest Python installation methods
	@$(ECHO_CMD) "$(CYAN)To install Python:$(NC)\n"
ifeq ($(PLATFORM_OS),macos)
	@$(ECHO_CMD) "$(YELLOW)  1. Install pyenv: brew install pyenv$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  2. Install Python: pyenv install 3.11.12$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  3. Alternative: brew install python@3.11$(NC)\n"
else ifeq ($(PLATFORM_OS),linux)
	@$(ECHO_CMD) "$(YELLOW)  1. Install pyenv: curl https://pyenv.run | bash$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  2. Install Python: pyenv install 3.11.12$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  3. Alternative: $(PACKAGE_INSTALL) python3 python3-venv$(NC)\n"
else
	@$(ECHO_CMD) "$(YELLOW)  1. Download from: https://www.python.org/downloads/$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  2. Or install via Chocolatey: choco install python$(NC)\n"
endif

_suggest_pyenv_installation: ## Internal: Suggest pyenv installation for better Python management
	@$(ECHO_CMD) "$(CYAN)For better Python version management, consider installing pyenv:$(NC)\n"
ifeq ($(PLATFORM_OS),macos)
	@$(ECHO_CMD) "$(YELLOW)  brew install pyenv$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  echo 'eval \\n"\$$(pyenv init -)\"' >> ~/.zshrc$(NC)"
else ifeq ($(PLATFORM_OS),linux)
	@$(ECHO_CMD) "$(YELLOW)  curl https://pyenv.run | bash$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  # Add pyenv to your shell profile$(NC)\n"
else
	@$(ECHO_CMD) "$(YELLOW)  # pyenv-win available for Windows$(NC)\n"
endif

# ============================================================================
# ENVIRONMENT FILE MANAGEMENT
# ============================================================================

.PHONY: _load_env _validate_env _create_env_from_example

_load_env: ## Internal: Load and export environment variables
	@$(call check_env_file)

_validate_env: _load_env ## Internal: Validate required environment variables
	@$(ECHO_CMD) "$(YELLOW)Validating environment variables...$(NC)\n"
	@set -a && . ./.env && set +a && \
	$(call check_var,POSTGRES_HOST) && \
	$(call check_var,POSTGRES_PORT) && \
	$(call check_var,POSTGRES_DB) && \
	$(call check_var,POSTGRES_USER) && \
	$(call check_var,POSTGRES_PASSWORD) && \
	$(call check_var,AIRFLOW_ADMIN_USERNAME) && \
	$(call check_var,AIRFLOW_ADMIN_PASSWORD) && \
	$(call check_var,AIRFLOW_ADMIN_EMAIL) && \
	$(call check_var,AIRFLOW_ADMIN_FIRSTNAME) && \
	$(call check_var,AIRFLOW_ADMIN_LASTNAME) && \
	$(call check_var,AIRFLOW__API_AUTH__JWT_SECRET) && \
	$(call check_var,ALPHA_VANTAGE_API_KEY) && \
	echo -e "$(GREEN)✓ Environment validation passed$(NC)"

_create_env_from_example: ## Internal: Create .env from .env.example with user guidance
	@if [ ! -f .env ]; then \
		echo -e "$(YELLOW)Please customize .env.example with your values:$(NC)"; \
		echo -e "$(CYAN)  • ALPHA_VANTAGE_API_KEY: Get from https://www.alphavantage.co/support/#api-key$(NC)"; \
		echo -e "$(CYAN)  • Database credentials: Set your PostgreSQL configuration$(NC)"; \
		echo -e "$(CYAN)  • Airflow admin: Set your preferred admin username/password$(NC)"; \
		echo -e "$(CYAN)  • JWT secret: Change from default for security$(NC)"; \
		echo -e ""; \
		echo -e "$(YELLOW)Press Enter after customizing .env.example to continue...$(NC)"; \
		read -p ""; \
		cp .env.example .env; \
		echo -e "$(GREEN)✓ Copied customized .env.example to .env$(NC)"; \
	else \
		echo -e "$(GREEN)✓ .env file already exists$(NC)"; \
	fi

# ============================================================================
# ENVIRONMENT SETUP WORKFLOW
# ============================================================================

.PHONY: setup _setup_header _setup_steps _setup_footer

setup: ## 📦 Initialize project and basic environment (environment variables)
	@$(MAKE) _setup_header
	@$(MAKE) _setup_steps
	@$(MAKE) _setup_footer

_setup_header: ## Internal: Display setup header
	@$(ECHO_CMD) "$(BLUE)Setting up ticker-converter project environment...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)\n"

_setup_steps: ## Internal: Execute setup configuration steps
	@$(ECHO_CMD) "$(CYAN)STEP 1: Platform Detection$(NC)\n"
	@$(MAKE) platform-info
	@$(ECHO_CMD) "$(CYAN)STEP 2: Customize Environment Configuration$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)\n"
	@$(MAKE) _create_env_from_example
	@$(ECHO_CMD) "$(CYAN)STEP 3: Validate Configuration$(NC)\n"
	@$(MAKE) _validate_env
	@$(ECHO_CMD) "$(CYAN)STEP 4: Setup Python Environment$(NC)\n"
	@$(MAKE) _setup_python_environment

_setup_footer: ## Internal: Display setup completion message
	@$(ECHO_CMD) "$(GREEN)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)\n"
	@$(ECHO_CMD) "$(GREEN)✓ Environment setup completed!$(NC)\n"
	@$(ECHO_CMD) "$(CYAN)Platform: $(PLATFORM_OS) ($(PLATFORM_ARCH))$(NC)\n"
	@$(ECHO_CMD) "$(CYAN)Python: $(PYTHON) (Virtual Environment: $(shell test -f $(VENV_PYTHON) && echo \n"Active" || echo "Not Active"))$(NC)"
	@$(ECHO_CMD) "$(CYAN)Next steps:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • Production runtime: make install$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • Testing workflow: make install-test$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • Development work: make install-test$(NC)\n"
	@$(ECHO_CMD) "$(GREEN)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)\n"

# ============================================================================
# ENVIRONMENT DEBUGGING AND INSPECTION
# ============================================================================

.PHONY: env-info env-debug env-test

env-info: ## 🔧 Display current environment configuration
	@$(ECHO_CMD) "$(CYAN)Environment Configuration:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Project:$(NC) $(PACKAGE_NAME)\n"
	@$(ECHO_CMD) "$(YELLOW)Virtual Environment:$(NC) $(VENV_PATH)\n"
	@$(ECHO_CMD) "$(YELLOW)Python Executable:$(NC) $(PYTHON)\n"
	@$(ECHO_CMD) "$(YELLOW)Pip Executable:$(NC) $(PIP)\n"
	@$(ECHO_CMD) "$(YELLOW)Environment File:$(NC) $(if $(wildcard .env),✓ Present,❌ Missing)\n"

env-debug: ## 🔧 Display detailed environment debug information
	@$(ECHO_CMD) "$(CYAN)Environment Debug Information:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Virtual Environment Path:$(NC) $(VENV_PATH)\n"
	@$(ECHO_CMD) "$(YELLOW)Virtual Environment Bin:$(NC) $(VENV_BIN)\n"
	@$(ECHO_CMD) "$(YELLOW)Virtual Environment Python:$(NC) $(VENV_PYTHON)\n"
	@$(ECHO_CMD) "$(YELLOW)Virtual Environment Active:$(NC) $(shell test -f $(VENV_PYTHON) && echo \n"Yes" || echo "No")"
	@$(ECHO_CMD) "$(YELLOW)Current Python:$(NC) $(shell which $(PYTHON) 2>/dev/null || echo \n"Not Found")"
	@$(ECHO_CMD) "$(YELLOW)Python Version:$(NC) $(shell $(PYTHON) --version 2>/dev/null || echo \n"Not Available")"
	@$(ECHO_CMD) "$(YELLOW)Pip Version:$(NC) $(shell $(PIP) --version 2>/dev/null || echo \n"Not Available")"
	@echo ""
	@if [ -f .env ]; then \
		echo -e "$(CYAN)Environment Variables (from .env):$(NC)"; \
		grep -E "^[A-Z_]+" .env | head -10 | while read line; do \
			var_name=$$(echo $$line | cut -d'=' -f1); \
			echo -e "$(YELLOW)$$var_name:$(NC) Set"; \
		done; \
	else \
		echo -e "$(RED).env file not found$(NC)"; \
	fi

env-test: ## 🧪 Execute tests environment setup and validation
	@$(ECHO_CMD) "$(CYAN)Testing Environment Setup...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)1. Testing Python environment...$(NC)\n"
	@$(PYTHON) -c "import sys; print(f'Python {sys.version}')"
	@$(ECHO_CMD) "$(YELLOW)2. Testing pip functionality...$(NC)\n"
	@$(PIP) --version
	@$(ECHO_CMD) "$(YELLOW)3. Testing virtual environment...$(NC)\n"
	@if [ -f $(VENV_PYTHON) ]; then \
		echo -e "$(GREEN)✓ Virtual environment is active$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠ Virtual environment not found$(NC)"; \
	fi
	@$(ECHO_CMD) "$(YELLOW)4. Testing environment variables...$(NC)\n"
	@$(MAKE) _load_env && echo -e "$(GREEN)✓ Environment file loaded$(NC)"
	@$(ECHO_CMD) "$(GREEN)Environment test completed$(NC)\n"

# ============================================================================
# PUBLIC ENVIRONMENT TARGETS
# ============================================================================

.PHONY: setup-env validate-env validate-tools

setup-env: ## 🔧 Setup complete environment configuration
	@$(ECHO_CMD) "$(BLUE)Setting up environment configuration...$(NC)\n"
	@$(MAKE) _setup_steps
	@$(MAKE) _setup_footer

validate-env: ## ✓ Validate environment configuration and dependencies
	@$(ECHO_CMD) "$(BLUE)Validating environment...$(NC)\n"
	@$(MAKE) _validate_env
	@$(MAKE) env-test
	@$(ECHO_CMD) "$(GREEN)✓ Environment validation completed$(NC)\n"

validate-tools: ## ✓ Validate that essential development tools are available
	@$(ECHO_CMD) "$(BLUE)Validating development tools...$(NC)\n"
	@$(MAKE) check-tools
	@$(ECHO_CMD) "$(GREEN)✓ Tool validation completed$(NC)\n"

# Export environment variables for use in other modules
export PACKAGE_NAME
export VENV_PATH
export VENV_PYTHON
export VENV_PIP
export PYTHON
export PIP
