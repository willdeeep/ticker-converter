# ============================================================================
# TEST EXECUTION AND COVERAGE ANALYSIS
# ============================================================================
# This module handles test execution, coverage analysis, and test-related
# operations with cross-platform support
#
# Dependencies: Makefile.platform, Makefile.env, Makefile.install
# ============================================================================

# Test configuration
TEST_DIR := tests
SRC_DIR := src
COVERAGE_DIR := htmlcov
COVERAGE_FILE := .coverage

# Test execution parameters
PYTEST_ARGS := --verbose --tb=short
PYTEST_PARALLEL_ARGS := -n auto
PYTEST_COVERAGE_ARGS := --cov=$(SRC_DIR) --cov-report=term --cov-report=html --cov-report=xml

# ============================================================================
# BASIC TEST EXECUTION
# ============================================================================

.PHONY: test test-unit test-integration test-fast test-verbose

test: _load_env ## üß™ Execute full test suite
	@printf "\033[0;34mRunning full test suite...\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mExecuting tests with pytest...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS)
	@printf "\033[0;32m‚úì Test suite completed\033[0m\n"

test-unit: _load_env ## üß™ Execute unit tests only
	@printf "\033[0;34mRunning unit tests...\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mExecuting unit tests...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR)/unit $(PYTEST_ARGS) 2>/dev/null || \
	$(PYTHON) -m pytest $(TEST_DIR) -k "unit" $(PYTEST_ARGS) 2>/dev/null || \
	$(PYTHON) -m pytest $(TEST_DIR) -m "unit" $(PYTEST_ARGS) 2>/dev/null || \
	$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS)
	@printf "\033[0;32m‚úì Unit tests completed\033[0m\n"

test-integration: _load_env ## üß™ Execute integration tests only
	@printf "\033[0;34mRunning integration tests...\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mExecuting integration tests...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR)/integration $(PYTEST_ARGS) 2>/dev/null || \
	$(PYTHON) -m pytest $(TEST_DIR) -k "integration" $(PYTEST_ARGS) 2>/dev/null || \
	$(PYTHON) -m pytest $(TEST_DIR) -m "integration" $(PYTEST_ARGS) 2>/dev/null || \
	echo -e "\033[0;33m‚ö† No integration tests found or specific marker not defined\033[0m\n"
	@printf "\033[0;32m‚úì Integration tests completed\033[0m\n"

test-fast: _load_env ## üß™ Execute tests in parallel (fast mode)
	@printf "\033[0;34mRunning tests in parallel mode...\033[0m\n"
	@$(MAKE) _check_test_deps
	@if $(PYTHON) -c "import pytest_xdist" 2>/dev/null; then \
		echo -e "\033[0;33mExecuting tests with parallel execution...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS) $(PYTEST_PARALLEL_ARGS); \
	else \
		echo -e "\033[0;33mpytest-xdist not available, running sequential tests...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS); \
	fi
	@printf "\033[0;32m‚úì Fast test execution completed\033[0m\n"

test-verbose: _load_env ## üß™ Execute tests with verbose output
	@$(call test_execution_pattern,verbose,--verbose --tb=long -v -s)

test-debug: _load_env ## üß™ Execute tests with debugging enabled
	@$(call test_execution_pattern,debug,--pdb --tb=long -v -s)

# ============================================================================
# COVERAGE ANALYSIS
# ============================================================================

.PHONY: test-coverage coverage coverage-report coverage-html coverage-open coverage-xml

test-coverage: _load_env ## üß™ Execute tests with coverage reporting
	@printf "\033[0;34mRunning tests with coverage analysis...\033[0m\n"
	@$(MAKE) _check_test_deps
	@$(MAKE) _check_coverage_deps
	@printf "\033[0;33mExecuting tests with coverage collection...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS) $(PYTEST_COVERAGE_ARGS)
	@printf "\033[0;32m‚úì Test coverage analysis completed\033[0m\n"

# ============================================================================
# CONSOLIDATED COVERAGE COMMANDS - Phase 2 Optimization
# ============================================================================

coverage: _load_env ## üß™ üìä Flexible coverage command (run 'make coverage help' for options)
	@if [ "$(filter help,$(MAKECMDGOALS))" ]; then \
		echo -e "$(HEADER_COLOR)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\033[0m\n"; \
		echo -e "$(HEADER_COLOR)‚ïë                     COVERAGE COMMAND OPTIONS                    ‚ïë\033[0m\n"; \
		echo -e "$(HEADER_COLOR)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\033[0m\n"; \
		echo -e "\033[0;36mUsage: make coverage [option]\033[0m\n"; \
		echo ""; \
		echo -e "\033[0;33mOptions:\033[0m\n"; \
		echo -e "  report    Generate terminal coverage report"; \
		echo -e "  html      Generate HTML coverage report"; \
		echo -e "  xml       Generate XML coverage report"; \
		echo -e "  open      Generate and open HTML report in browser"; \
		echo -e "  all       Generate all report formats"; \
		echo ""; \
		echo -e "\033[0;32mExamples:\033[0m\n"; \
		echo -e "  make coverage report    # Terminal report only"; \
		echo -e "  make coverage html      # HTML report only"; \
		echo -e "  make coverage all       # All formats"; \
	elif [ "$(filter report,$(MAKECMDGOALS))" ]; then \
		$(MAKE) coverage-report-only; \
	elif [ "$(filter html,$(MAKECMDGOALS))" ]; then \
		$(MAKE) coverage-html-only; \
	elif [ "$(filter xml,$(MAKECMDGOALS))" ]; then \
		$(MAKE) coverage-xml-only; \
	elif [ "$(filter open,$(MAKECMDGOALS))" ]; then \
		$(MAKE) coverage-open-only; \
	elif [ "$(filter all,$(MAKECMDGOALS))" ]; then \
		$(MAKE) coverage-all-formats; \
	else \
		echo -e "\033[0;34mGenerating standard coverage report...\033[0m\n"; \
		$(MAKE) coverage-report-only; \
	fi

# Internal coverage command implementations
coverage-report-only: _load_env ## Internal: Generate terminal coverage report
	@$(MAKE) _check_coverage_deps
	@if [ -f $(COVERAGE_FILE) ]; then \
		echo -e "\033[0;33mGenerating terminal coverage report...\033[0m\n"; \
		$(PYTHON) -m coverage report; \
		echo -e "\033[0;32m‚úì Terminal coverage report generated\033[0m\n"; \
	else \
		echo -e "\033[0;31m‚ùå No coverage data found. Run 'make test-coverage' first.\033[0m\n"; \
		exit 1; \
	fi

coverage-html-only: _load_env ## Internal: Generate HTML coverage report
	@$(MAKE) _check_coverage_deps
	@if [ -f $(COVERAGE_FILE) ]; then \
		echo -e "\033[0;33mGenerating HTML coverage report...\033[0m\n"; \
		$(PYTHON) -m coverage html; \
		echo -e "\033[0;32m‚úì HTML coverage report generated in $(COVERAGE_DIR)/\033[0m\n"; \
	else \
		echo -e "\033[0;31m‚ùå No coverage data found. Run 'make test-coverage' first.\033[0m\n"; \
		exit 1; \
	fi

coverage-xml-only: _load_env ## Internal: Generate XML coverage report
	@$(MAKE) _check_coverage_deps
	@if [ -f $(COVERAGE_FILE) ]; then \
		echo -e "\033[0;33mGenerating XML coverage report...\033[0m\n"; \
		$(PYTHON) -m coverage xml; \
		echo -e "\033[0;32m‚úì XML coverage report generated\033[0m\n"; \
	else \
		echo -e "\033[0;31m‚ùå No coverage data found. Run 'make test-coverage' first.\033[0m\n"; \
		exit 1; \
	fi

coverage-open-only: coverage-html-only ## Internal: Generate and open HTML coverage report
	@printf "\033[0;36mOpening HTML coverage report...\033[0m\n"
	@if [ -f "$(COVERAGE_DIR)/index.html" ]; then \
		if command -v open >/dev/null 2>&1; then \
			open "$(COVERAGE_DIR)/index.html"; \
		elif command -v xdg-open >/dev/null 2>&1; then \
			xdg-open "$(COVERAGE_DIR)/index.html"; \
		else \
			echo -e "\033[0;33m‚ö† Cannot open browser automatically. Open: $(COVERAGE_DIR)/index.html\033[0m\n"; \
		fi; \
		echo -e "\033[0;32m‚úì HTML coverage report opened\033[0m\n"; \
	else \
		echo -e "\033[0;31m‚ùå HTML report not found\033[0m\n"; \
		exit 1; \
	fi

coverage-all-formats: _load_env ## Internal: Generate all coverage report formats
	@printf "\033[0;34mGenerating all coverage report formats...\033[0m\n"
	@$(MAKE) coverage-report-only
	@$(MAKE) coverage-html-only
	@$(MAKE) coverage-xml-only
	@printf "\033[0;32m‚úì All coverage reports generated\033[0m\n"

# Legacy commands for backward compatibility (deprecated)
coverage-report: coverage-report-only ## ‚ö†Ô∏è DEPRECATED: Use 'make coverage report' instead
	@printf "\033[0;33m‚ö†Ô∏è Deprecated: Use 'make coverage report' instead\033[0m\n"

coverage-html: coverage-html-only ## ‚ö†Ô∏è DEPRECATED: Use 'make coverage html' instead
	@printf "\033[0;33m‚ö†Ô∏è Deprecated: Use 'make coverage html' instead\033[0m\n"

coverage-xml: coverage-xml-only ## ‚ö†Ô∏è DEPRECATED: Use 'make coverage xml' instead
	@printf "\033[0;33m‚ö†Ô∏è Deprecated: Use 'make coverage xml' instead\033[0m\n"

coverage-open: coverage-open-only ## ‚ö†Ô∏è DEPRECATED: Use 'make coverage open' instead
	@printf "\033[0;33m‚ö†Ô∏è Deprecated: Use 'make coverage open' instead\033[0m\n"
			open $(COVERAGE_DIR)/index.html; \
		elif command -v xdg-open >/dev/null 2>&1; then \
			xdg-open $(COVERAGE_DIR)/index.html; \
		elif command -v start >/dev/null 2>&1; then \
			start $(COVERAGE_DIR)/index.html; \
		else \
			echo -e "\033[0;33mPlease manually open: $(COVERAGE_DIR)/index.html\033[0m\n"; \
		fi; \
	else \
		echo -e "\033[0;31m‚ùå HTML coverage report not found\033[0m\n"; \
		exit 1; \
	fi

# ============================================================================
# SPECIALIZED TEST MODES
# ============================================================================

.PHONY: test-watch test-debug test-profile test-benchmark

test-watch: _load_env ## üß™ Execute tests in watch mode (continuous)
	@printf "\033[0;34mStarting test watch mode...\033[0m\n"
	@$(MAKE) _check_test_deps
	@if $(PYTHON) -c "import pytest_watch" 2>/dev/null; then \
		echo -e "\033[0;33mRunning tests in watch mode (press Ctrl+C to stop)...\033[0m\n"; \
		$(PYTHON) -m pytest_watch $(TEST_DIR) -- $(PYTEST_ARGS); \
	else \
		echo -e "\033[0;33mpytest-watch not available. Install with: pip install pytest-watch\033[0m\n"; \
		echo -e "\033[0;36mAlternative: Run 'make install-test' to get all development tools\033[0m\n"; \
		exit 1; \
	fi

test-profile: _load_env ## üß™ Execute performance profiling on tests
	@printf "\033[0;34mRunning test performance profiling...\033[0m\n"
	@$(MAKE) _check_test_deps
	@if $(PYTHON) -c "import pytest_profiling" 2>/dev/null; then \
		echo -e "\033[0;33mExecuting tests with performance profiling...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) --profile $(PYTEST_ARGS); \
	else \
		echo -e "\033[0;33mpytest-profiling not available. Install with: pip install pytest-profiling\033[0m\n"; \
		echo -e "\033[0;36mRunning basic timing analysis...\033[0m\n"; \
		time $(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS); \
	fi
	@printf "\033[0;32m‚úì Test profiling completed\033[0m\n"

test-benchmark: _load_env ## üß™ Execute benchmark tests
	@printf "\033[0;34mRunning benchmark tests...\033[0m\n"
	@$(MAKE) _check_test_deps
	@if $(PYTHON) -c "import pytest_benchmark" 2>/dev/null; then \
		echo -e "\033[0;33mExecuting benchmark tests...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) --benchmark-only $(PYTEST_ARGS); \
	else \
		echo -e "\033[0;33mpytest-benchmark not available. Install with: pip install pytest-benchmark\033[0m\n"; \
		echo -e "\033[0;36mRunning tests with benchmark marker...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) -m "benchmark" $(PYTEST_ARGS) 2>/dev/null || \
		echo -e "\033[0;33mNo benchmark tests found\033[0m\n"; \
	fi
	@printf "\033[0;32m‚úì Benchmark testing completed\033[0m\n"

# ============================================================================
# TEST FILTERING AND SELECTION
# ============================================================================

.PHONY: test-by-name test-by-marker test-failed test-changed

test-by-name: _load_env ## üß™ Execute tests matching a name pattern (interactive)
	@printf "\033[0;36mTest filtering by name\033[0m\n"
	@printf "\033[0;33mEnter test name pattern (e.g., test_database, TestClass, etc.):\033[0m\n"
	@read -p "Pattern: " pattern && \
	echo -e "\033[0;33mRunning tests matching pattern: $$pattern\033[0m\n" && \
	$(PYTHON) -m pytest $(TEST_DIR) -k "$$pattern" $(PYTEST_ARGS)

test-by-marker: _load_env ## üß™ Execute tests with specific marker (interactive)
	@printf "\033[0;36mTest filtering by marker\033[0m\n"
	@printf "\033[0;33mAvailable markers:\033[0m\n"
	@$(PYTHON) -m pytest --markers 2>/dev/null | grep "^@pytest.mark" || echo "  No custom markers found"
	@printf "\033[0;33mEnter marker name (e.g., slow, unit, integration):\033[0m\n"
	@read -p "Marker: " marker && \
	echo -e "\033[0;33mRunning tests with marker: $$marker\033[0m\n" && \
	$(PYTHON) -m pytest $(TEST_DIR) -m "$$marker" $(PYTEST_ARGS)

test-failed: _load_env ## üß™ Execute only failed tests from last run
	@printf "\033[0;34mRunning only failed tests from last run...\033[0m\n"
	@$(MAKE) _check_test_deps
	@if [ -f .pytest_cache/v/cache/lastfailed ]; then \
		echo -e "\033[0;33mRe-running failed tests...\033[0m\n"; \
		$(PYTHON) -m pytest --lf $(PYTEST_ARGS); \
	else \
		echo -e "\033[0;33mNo failed tests found. Running full test suite...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS); \
	fi
	@printf "\033[0;32m‚úì Failed test execution completed\033[0m\n"

test-changed: _load_env ## üß™ Execute tests for changed files (requires git)
	@printf "\033[0;34mRunning tests for changed files...\033[0m\n"
	@$(MAKE) _check_test_deps
	@if command -v git >/dev/null 2>&1; then \
		changed_files=$$(git diff --name-only HEAD~1 | grep -E "\.(py)$$" | tr '\n' ' '); \
		if [ -n "$$changed_files" ]; then \
			echo -e "\033[0;33mChanged files: $$changed_files\033[0m\n"; \
			echo -e "\033[0;33mRunning tests for changed files...\033[0m\n"; \
			$(PYTHON) -m pytest --co -q $$changed_files 2>/dev/null && \
			$(PYTHON) -m pytest $$changed_files $(PYTEST_ARGS) || \
			echo -e "\033[0;33mNo tests found for changed files, running full suite...\033[0m\n" && \
			$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS); \
		else \
			echo -e "\033[0;33mNo Python files changed, running full test suite...\033[0m\n"; \
			$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS); \
		fi; \
	else \
		echo -e "\033[0;33mGit not available, running full test suite...\033[0m\n"; \
		$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS); \
	fi

# ============================================================================
# TEST ENVIRONMENT AND DEPENDENCIES
# ============================================================================

.PHONY: _check_test_deps _check_coverage_deps test-deps-info test-deps-install

_check_test_deps: ## Internal: Check test dependencies
	@$(PYTHON) -c "import pytest" 2>/dev/null || \
	(echo -e "\033[0;31m‚ùå pytest not available. Run 'make install-test' first.\033[0m\n" && exit 1)

test-deps-info: ## üß™ Display test dependency information
	@printf "\033[0;36mTest Dependencies Information:\033[0m\n"
	@printf "\033[0;33mCore Testing:\033[0m\n"
	@$(PYTHON) -c "import pytest; print(f'  ‚úì pytest {pytest.__version__}')" 2>/dev/null || echo "  ‚ùå pytest not available"
	@$(PYTHON) -c "import coverage; print(f'  ‚úì coverage {coverage.__version__}')" 2>/dev/null || echo "  ‚ùå coverage not available"
	@printf "\033[0;33mOptional Testing Tools:\033[0m\n"
	@$(PYTHON) -c "import pytest_xdist; print(f'  ‚úì pytest-xdist (parallel execution)')" 2>/dev/null || echo "  ‚óã pytest-xdist not available"
	@$(PYTHON) -c "import pytest_watch; print(f'  ‚úì pytest-watch (watch mode)')" 2>/dev/null || echo "  ‚óã pytest-watch not available"
	@$(PYTHON) -c "import pytest_profiling; print(f'  ‚úì pytest-profiling (performance)')" 2>/dev/null || echo "  ‚óã pytest-profiling not available"
	@$(PYTHON) -c "import pytest_benchmark; print(f'  ‚úì pytest-benchmark (benchmarks)')" 2>/dev/null || echo "  ‚óã pytest-benchmark not available"

test-deps-install: ## üß™ Install additional test dependencies
	@printf "\033[0;34mInstalling additional test dependencies...\033[0m\n"
	@printf "\033[0;33mInstalling pytest extensions...\033[0m\n"
	@$(PIP) install pytest-xdist pytest-watch pytest-profiling pytest-benchmark --quiet
	@printf "\033[0;32m‚úì Additional test dependencies installed\033[0m\n"

# ============================================================================
# TEST REPORTING AND ANALYSIS
# ============================================================================

.PHONY: test-report test-stats test-duration test-summary

test-report: _load_env ## üß™ Generate comprehensive test report
	@printf "\033[0;34mGenerating comprehensive test report...\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mRunning tests with detailed reporting...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS) \
		--tb=short \
		--durations=10 \
		--junit-xml=test-report.xml \
		--html=test-report.html --self-contained-html 2>/dev/null || \
	$(PYTHON) -m pytest $(TEST_DIR) $(PYTEST_ARGS) --tb=short --durations=10
	@printf "\033[0;32m‚úì Test report generated\033[0m\n"

test-stats: _load_env ## üß™ Display test statistics and metrics
	@printf "\033[0;36mTest Statistics:\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mTest Discovery:\033[0m\n"
	@$(PYTHON) -m pytest --collect-only $(TEST_DIR) 2>/dev/null | grep -E "test session starts|collected" || \
	echo "  Test discovery information not available"
	@printf "\033[0;33mTest Files:\033[0m\n"
	@find $(TEST_DIR) -name "test_*.py" -o -name "*_test.py" 2>/dev/null | wc -l | sed 's/^/  /' || echo "  0"
	@printf "\033[0;33mCoverage Files:\033[0m\n"
	@if [ -f $(COVERAGE_FILE) ]; then \
		echo "  ‚úì Coverage data available"; \
		$(PYTHON) -c "import coverage; cov = coverage.Coverage(); cov.load(); print(f'  Total statements: {cov.get_data().measured_files().__len__()}')" 2>/dev/null || echo "  Coverage details not available"; \
	else \
		echo "  ‚ùå No coverage data found"; \
	fi

test-duration: _load_env ## üß™ Display test execution duration analysis
	@printf "\033[0;36mTest Duration Analysis:\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mRunning tests with duration tracking...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR) --durations=0 --tb=no -q

test-summary: _load_env ## üß™ Display quick test summary
	@printf "\033[0;36mQuick Test Summary:\033[0m\n"
	@$(MAKE) _check_test_deps
	@printf "\033[0;33mRunning quick test check...\033[0m\n"
	@$(PYTHON) -m pytest $(TEST_DIR) --tb=no -q

# ============================================================================
# TEST CLEANUP AND MAINTENANCE
# ============================================================================

.PHONY: test-clean test-clean-cache test-clean-coverage test-clean-all

test-clean: ## üß™ Clean test artifacts and cache
	@printf "\033[0;33mCleaning test artifacts...\033[0m\n"
	@$(MAKE) test-clean-cache
	@$(MAKE) test-clean-coverage
	@printf "\033[0;32m‚úì Test cleanup completed\033[0m\n"

test-clean-cache: ## üß™ Clean pytest cache
	@printf "\033[0;33mCleaning pytest cache...\033[0m\n"
	@rm -rf .pytest_cache
	@rm -rf $(TEST_DIR)/__pycache__
	@find $(TEST_DIR) -name "*.pyc" -delete 2>/dev/null || true
	@find $(TEST_DIR) -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@printf "\033[0;32m‚úì Pytest cache cleaned\033[0m\n"

test-clean-coverage: ## üß™ Clean coverage reports and data
	@printf "\033[0;33mCleaning coverage data...\033[0m\n"
	@rm -f $(COVERAGE_FILE)
	@rm -f coverage.xml
	@rm -rf $(COVERAGE_DIR)
	@printf "\033[0;32m‚úì Coverage data cleaned\033[0m\n"

test-clean-all: test-clean ## üß™ Clean all test-related files and reports
	@printf "\033[0;33mCleaning all test reports...\033[0m\n"
	@rm -f test-report.xml test-report.html
	@rm -f .coverage.*
	@printf "\033[0;32m‚úì All test files cleaned\033[0m\n"

# ============================================================================
# TEST DEBUGGING AND DIAGNOSTICS
# ============================================================================

.PHONY: test-debug-info test-doctor test-env-check

test-debug-info: _load_env ## üß™ Display test debugging information
	@printf "\033[0;36mTest Debug Information:\033[0m\n"
	@printf "\033[0;33mTest Environment:\033[0m\n"
	@printf "  Python: $(PYTHON)\n"
	@printf "  Test Directory: $(TEST_DIR)\n"
	@printf "  Source Directory: $(SRC_DIR)\n"
	@printf "\033[0;33mTest Dependencies:\033[0m\n"
	@$(MAKE) test-deps-info
	@printf "\033[0;33mTest Configuration:\033[0m\n"
	@printf "  pytest.ini: $(if $(wildcard pytest.ini),‚úì Present,‚ùå Missing)\n"
	@printf "  .coveragerc: $(if $(wildcard .coveragerc),‚úì Present,‚ùå Missing)\n"
	@printf "  pyproject.toml: $(if $(wildcard pyproject.toml),‚úì Present,‚ùå Missing)\n"

test-doctor: _load_env ## üß™ Diagnose test setup issues
	@printf "\033[0;36mTest Doctor - Diagnosing Issues...\033[0m\n"
	@printf "\033[0;33m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m\n"
	@printf "\033[0;33m1. Checking test dependencies...\033[0m\n"
	@$(MAKE) _check_test_deps 2>/dev/null && echo -e "\033[0;32m‚úì Test dependencies available\033[0m\n" || \
	echo -e "\033[0;31mIssue: Missing test dependencies\033[0m\n" && echo -e "\033[0;36mFix: Run 'make install-test'\033[0m\n"
	@echo ""
	@printf "\033[0;33m2. Checking test directory structure...\033[0m\n"
	@if [ -d "$(TEST_DIR)" ]; then \
		echo -e "\033[0;32m‚úì Test directory exists\033[0m\n"; \
		test_count=$$(find $(TEST_DIR) -name "test_*.py" -o -name "*_test.py" 2>/dev/null | wc -l); \
		echo -e "\033[0;36mFound $$test_count test files\033[0m\n"; \
	else \
		echo -e "\033[0;31mIssue: Test directory missing\033[0m\n"; \
		echo -e "\033[0;36mFix: Create $(TEST_DIR) directory and add test files\033[0m\n"; \
	fi
	@echo ""
	@printf "\033[0;33m3. Checking source directory...\033[0m\n"
	@if [ -d "$(SRC_DIR)" ]; then \
		echo -e "\033[0;32m‚úì Source directory exists\033[0m\n"; \
	else \
		echo -e "\033[0;33mWarning: Source directory not found\033[0m\n"; \
		echo -e "\033[0;36mNote: Adjust SRC_DIR in Makefile if needed\033[0m\n"; \
	fi
	@printf "\033[0;33m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m\n"

test-env-check: _load_env ## üß™ Validate test environment setup
	@printf "\033[0;36mTest Environment Check:\033[0m\n"
	@printf "\033[0;33mPython Environment:\033[0m\n"
	@$(PYTHON) --version
	@printf "\033[0;33mModule Import Check:\033[0m\n"
	@$(PYTHON) -c "import $(PACKAGE_NAME); print('‚úì Package can be imported')" 2>/dev/null || \
	echo -e "\033[0;33m‚ö† Package import failed - ensure package is installed\033[0m\n"
	@printf "\033[0;33mTest Discovery:\033[0m\n"
	@$(PYTHON) -m pytest --collect-only $(TEST_DIR) -q 2>/dev/null | head -5 || \
	echo -e "\033[0;33m‚ö† Test discovery failed\033[0m\n"