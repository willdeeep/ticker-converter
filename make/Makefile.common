# ═══════════════════════════════════════════════════════════════════════════════
# COMMON FUNCTIONS AND PATTERNS
# ═══════════════════════════════════════════════════════════════════════════════
# Shared utility functions for use across all Makefile modules
# Extracted from common patterns identified in the deduplication analysis

# ═══════════════════════════════════════════════════════════════════════════════
# HELP: Common Functions
# ═══════════════════════════════════════════════════════════════════════════════

help-common: ## 🔧 Show common functions available across modules
	@printf "\\033[0;35m╔══════════════════════════════════════════════════════════════════════════════╗\\033[0m\\n"
	@printf "\\033[0;35m║                            COMMON FUNCTIONS                                  ║\\033[0m\\n"
	@printf "\\033[0;35m╚══════════════════════════════════════════════════════════════════════════════╝\\033[0m\\n"
	@echo ""
	@printf "\\033[0;36mShared Utility Functions:\\033[0m\\n"
	@printf "  \\033[0;33m• pip_operation\\033[0m      - Standardized pip operations with error handling\\n"
	@printf "  \\033[0;33m• postgres_operation\\033[0m - Common PostgreSQL database operations\\n"
	@printf "  \\033[0;33m• find_python_files\\033[0m - Intelligent Python file discovery\\n"
	@printf "  \\033[0;33m• validate_command\\033[0m   - Command existence validation\\n"
	@printf "  \\033[0;33m• progress_indicator\\033[0m - Consistent progress indication\\n"
	@echo ""
	@printf "\\033[0;32m✓ All functions include error handling and consistent output formatting\\033[0m\\n"

# ═══════════════════════════════════════════════════════════════════════════════
# COMMON FUNCTION DEFINITIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Standardized pip operations (used in 8+ commands)
define pip_operation
	@printf "\\033[0;34mRunning pip operation: $(1)\\033[0m\\n"
	@if ! command -v pip >/dev/null 2>&1; then \
		printf "\\033[0;31m✗ pip not found. Please install Python and pip first.\\033[0m\\n"; \
		exit 1; \
	fi
	@printf "\\033[0;33mUsing pip: $$(which pip)\\033[0m\\n"
	@pip $(1) || { printf "\\033[0;31m✗ Pip operation failed: $(1)\\033[0m\\n"; exit 1; }
	@printf "\\033[0;32m✓ Pip operation completed successfully\\033[0m\\n"
endef

# PostgreSQL database operations (used in 13+ commands)
define postgres_operation
	@printf "\\033[0;34mRunning PostgreSQL operation: $(1)\\033[0m\\n"
	@if ! command -v psql >/dev/null 2>&1; then \
		printf "\\033[0;31m✗ PostgreSQL client (psql) not found.\\033[0m\\n"; \
		printf "\\033[0;33mPlease install PostgreSQL or use: make install-postgres\\033[0m\\n"; \
		exit 1; \
	fi
	@printf "\\033[0;33mUsing PostgreSQL: $$(psql --version | head -n1)\\033[0m\\n"
	@$(1) || { printf "\\033[0;31m✗ PostgreSQL operation failed\\033[0m\\n"; exit 1; }
	@printf "\\033[0;32m✓ PostgreSQL operation completed successfully\\033[0m\\n"
endef

# Python file discovery with intelligent filtering (used in 9+ commands)
define find_python_files
	@printf "\\033[0;34mDiscovering Python files: $(1)\\033[0m\\n"
	@if [ -d "$(1)" ]; then \
		echo -e "$(YELLOW)Searching in: $(1)$(NC)"; \
	find "$(1)" -name "*.py" -type f \
			! -path "*/.*" \
			! -path "*/__pycache__/*" \
			! -path "*/venv/*" \
			! -path "*/.venv/*" \
			! -path "*/node_modules/*" \
			! -path "*/build/*" \
			! -path "*/dist/*" \
			2>/dev/null || true; \
	else \
		echo -e "$(WARNING_COLOR)⚠ Directory not found: $(1)$(NC)"; \
	fi
endef

# Command validation with helpful error messages
define validate_command
	@printf "\\033[0;34mValidating command: $(1)\\033[0m\\n"
	@if ! command -v $(1) >/dev/null 2>&1; then \
		printf "\\033[0;31m✗ Command not found: $(1)\\033[0m\\n"; \
		$(if $(2),printf "\\033[0;33mSuggestion: $(2)\\033[0m\\n";) \
		exit 1; \
	fi
	@printf "\\033[0;32m✓ Command available: $(1) at $$(which $(1))\\033[0m\\n"
endef

# Progress indicator for long-running operations
define progress_indicator
	@printf "\\033[0;34m$(1)...\\033[0m\\n"
	@printf "\\033[0;33m"
	@for i in $$(seq 1 $(2)); do printf "▓"; sleep 0.1; done
	@printf "\\033[0m\\n"
	@printf "\\033[0;32m✓ $(1) completed\\033[0m\\n"
endef

# ═══════════════════════════════════════════════════════════════════════════════
# COMMON DEPENDENCY CHECKS (centralized from multiple modules)
# ═══════════════════════════════════════════════════════════════════════════════

_check_pytest_deps: ## Internal: Validate pytest dependencies
	@$(call validate_command,pytest,make install-test)
	@$(call validate_command,python,make install-python)

_check_coverage_deps: ## Internal: Validate coverage dependencies
	@$(call validate_command,coverage,pip install coverage)
	@$(call validate_command,pytest,make install-test)

_check_quality_deps: ## Internal: Validate code quality dependencies
	@$(call validate_command,black,pip install black)
	@$(call validate_command,pylint,pip install pylint)
	@$(call validate_command,mypy,pip install mypy)

_check_database_deps: ## Internal: Validate database dependencies
	@$(call validate_command,psql,make install-postgres)

_check_airflow_deps: ## Internal: Validate Airflow dependencies
	@$(call validate_command,airflow,pip install apache-airflow)

# ═══════════════════════════════════════════════════════════════════════════════
# COMMON PATTERNS FOR REPEATED OPERATIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Standard cleanup operation pattern
define cleanup_pattern
	@printf "\\033[0;34mCleaning $(1)...\\033[0m\\n"
	@if [ -d "$(2)" ]; then \
		printf "\\033[0;33mRemoving: $(2)\\033[0m\\n"; \
		rm -rf "$(2)"; \
		printf "\\033[0;32m✓ Cleaned: $(2)\\033[0m\\n"; \
	else \
		printf "\\033[0;36m• Already clean: $(2)\\033[0m\\n"; \
	fi
endef

# Standard test execution pattern
define test_execution_pattern
	@printf "\\033[0;34mRunning $(1) tests...\\033[0m\\n"
	@$(call progress_indicator,Preparing test environment,5)
	@$(MAKE) _check_pytest_deps
	@pytest $(2) $(TEST_DIR) $(PYTEST_ARGS) || { \
		printf "\\033[0;31m✗ $(1) tests failed\\033[0m\\n"; \
		exit 1; \
	}
	@printf "\\033[0;32m✓ $(1) tests completed successfully\\033[0m\\n"
endef

# Standard quality check pattern
define quality_check_pattern
	@printf "\\033[0;34mRunning $(1) quality check...\\033[0m\\n"
	@$(call progress_indicator,Initializing $(1),3)
	@$(2) $(3) || { \
		printf "\\033[0;31m✗ $(1) quality check failed\\033[0m\\n"; \
		exit 1; \
	}
	@printf "\\033[0;32m✓ $(1) quality check passed\\033[0m\\n"
endef

# ═══════════════════════════════════════════════════════════════════════════════
# VALIDATION AND DEBUG FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

common-validate: ## ⚙️ 🔍 Validate all common function dependencies
	@printf "\\033[0;35mCommon Function Validation\\033[0m\\n"
	@printf "\\033[0;34mChecking common function dependencies...\\033[0m\\n"
	@$(call validate_command,find,Core system utility)
	@$(call validate_command,grep,Core system utility)
	@$(call validate_command,awk,Core system utility)
	@$(call validate_command,sed,Core system utility)
	@printf "\\033[0;32m✓ All common function dependencies validated\\033[0m\\n"

common-debug: ## ℹ️ 🐛 Debug common function environment
	@printf "\\033[0;35mCommon Function Debug Information\\033[0m\\n"
	@printf "\\033[0;36mSystem Information:\\033[0m\\n"
	@printf "  OS: $(OS)\\n"
	@printf "  Shell: $$SHELL\\n"
	@printf "  Make: $$(make --version | head -n1)\\n"
	@printf "\\033[0;36mAvailable Commands:\\033[0m\\n"
	@for cmd in find grep awk sed python pip psql; do \
		if command -v $$cmd >/dev/null 2>&1; then \
			printf "  \\033[0;32m✓\\033[0m $$cmd: $$(which $$cmd)\\n"; \
		else \
			printf "  \\033[0;31m✗\\033[0m $$cmd: not found\\n"; \
		fi; \
	done

# ═══════════════════════════════════════════════════════════════════════════════
# PERFORMANCE OPTIMIZATION HELPERS
# ═══════════════════════════════════════════════════════════════════════════════

# Parallel execution wrapper for independent operations
define parallel_operation
	@printf "\\033[0;34mRunning parallel operation: $(1)\\033[0m\\n"
	@$(1) & \
	$(2) & \
	$(3) & \
	wait
	@printf "\\033[0;32m✓ Parallel operation completed\\033[0m\\n"
endef

# Conditional execution based on file changes
define conditional_execution
	@if [ $(1) -nt $(2) ] || [ ! -f $(2) ]; then \
		echo -e "$(BLUE)$(3) ($(1) changed)$(NC)"; \
		$(4); \
		touch $(2); \
	else \
		echo -e "$(INFO_COLOR)• $(3) (up to date)$(NC)"; \
	fi
endef

.PHONY: help-common common-validate common-debug