# ============================================================================
# CLEANING AND TEARDOWN OPERATIONS
# ============================================================================
# This module handles cleanup operations for build artifacts, cache files,
# logs, and development environment teardown
#
# Dependencies: Makefile.platform, Makefile.env
# ============================================================================

# Cleanup configuration
VENV_PATH := .venv
BUILD_DIRS := build dist *.egg-info
CACHE_DIRS := __pycache__ .pytest_cache .mypy_cache .ruff_cache
COVERAGE_FILES := .coverage .coverage.* htmlcov coverage.xml
LOG_FILES := *.log airflow/logs airflow/*.out airflow/*.err
TEMP_DIRS := .tmp temp tmp

# ============================================================================
# SELECTIVE CLEANUP OPERATIONS
# ============================================================================

.PHONY: clean clean-build clean-cache clean-coverage clean-logs clean-env clean-temp

clean: ## 🧹 Remove all build artifacts and cache (comprehensive)
	@$(ECHO_CMD) "$(BLUE)Performing comprehensive cleanup...$(NC)\n"
	@$(MAKE) clean-build
	@$(MAKE) clean-cache
	@$(MAKE) clean-coverage
	@$(MAKE) clean-logs
	@$(MAKE) clean-temp
	@$(ECHO_CMD) "$(GREEN)✓ Comprehensive cleanup completed$(NC)\n"

clean-build: ## 🧹 Remove build directories and artifacts
	@$(ECHO_CMD) "$(YELLOW)Cleaning build artifacts...$(NC)\n"
	@for dir in $(BUILD_DIRS); do \
		if [ -d "$$dir" ] || [ -f "$$dir" ]; then \
			echo -e "$(CYAN)  Removing: $$dir$(NC)"; \
			rm -rf $$dir; \
		fi; \
	done
	@find . -name "*.pyc" -type f -delete 2>/dev/null || true
	@find . -name "*.pyo" -type f -delete 2>/dev/null || true
	@find . -name "*.so" -type f -delete 2>/dev/null || true
	@find . -name "*.egg" -type f -delete 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Build artifacts cleaned$(NC)\n"

clean-cache: ## 🧹 Remove Python and tool cache directories
	@$(ECHO_CMD) "$(YELLOW)Cleaning cache directories...$(NC)\n"
	@for dir in $(CACHE_DIRS); do \
		if [ -d "$$dir" ]; then \
			echo -e "$(CYAN)  Removing: $$dir$(NC)"; \
			rm -rf $$dir; \
		fi; \
	done
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -type f -delete 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Cache directories cleaned$(NC)\n"

clean-coverage: ## 🧪 Remove coverage reports and data
	@$(ECHO_CMD) "$(YELLOW)Cleaning coverage data...$(NC)\n"
	@for file in $(COVERAGE_FILES); do \
		if [ -f "$$file" ] || [ -d "$$file" ]; then \
			echo -e "$(CYAN)  Removing: $$file$(NC)"; \
			rm -rf $$file; \
		fi; \
	done
	@rm -f test-report.xml test-report.html 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Coverage data cleaned$(NC)\n"

clean-logs: ## 🧹 Remove log files and directories
	@$(ECHO_CMD) "$(YELLOW)Cleaning log files...$(NC)\n"
	@for pattern in $(LOG_FILES); do \
		for file in $$pattern; do \
			if [ -f "$$file" ] || [ -d "$$file" ]; then \
				echo -e "$(CYAN)  Removing: $$file$(NC)"; \
				rm -rf "$$file"; \
			fi; \
		done 2>/dev/null || true; \
	done
	@find . -name "*.log" -type f -delete 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Log files cleaned$(NC)\n"

clean-env: ## 🧹 Remove virtual environment (DESTRUCTIVE)
	@$(ECHO_CMD) "$(RED)WARNING: This will remove the virtual environment!$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Virtual environment path: $(VENV_PATH)$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Press Ctrl+C to cancel, or Enter to continue...$(NC)\n"
	@read -p ""
	@if [ -d "$(VENV_PATH)" ]; then \
		echo -e "$(YELLOW)Removing virtual environment...$(NC)"; \
		rm -rf $(VENV_PATH); \
		echo -e "$(GREEN)✓ Virtual environment removed$(NC)"; \
	else \
		echo -e "$(YELLOW)⚠ Virtual environment not found$(NC)"; \
	fi

clean-temp: ## 🧹 Remove temporary directories and files
	@$(ECHO_CMD) "$(YELLOW)Cleaning temporary files...$(NC)\n"
	@for dir in $(TEMP_DIRS); do \
		if [ -d "$$dir" ]; then \
			echo -e "$(CYAN)  Removing: $$dir$(NC)"; \
			rm -rf $$dir; \
		fi; \
	done
	@find . -name "*.tmp" -type f -delete 2>/dev/null || true
	@find . -name ".DS_Store" -type f -delete 2>/dev/null || true
	@find . -name "Thumbs.db" -type f -delete 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Temporary files cleaned$(NC)\n"

# ============================================================================
# SERVICE-SPECIFIC CLEANUP
# ============================================================================

.PHONY: clean-db clean-airflow clean-docker clean-git

clean-db: ## 🗄️ Remove database data and logs (DESTRUCTIVE)
	@$(ECHO_CMD) "$(RED)WARNING: This will remove all database data!$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Press Ctrl+C to cancel, or Enter to continue...$(NC)\n"
	@read -p ""
	@$(ECHO_CMD) "$(YELLOW)Cleaning database files...$(NC)\n"
	@rm -f data/*.db 2>/dev/null || true
	@rm -f *.db 2>/dev/null || true
	@rm -f backup_*.sql 2>/dev/null || true
	@$(MAKE) db-clean-logs 2>/dev/null || echo -e "$(YELLOW)Database log cleanup not available$(NC)"
	@$(ECHO_CMD) "$(GREEN)✓ Database data cleaned$(NC)\n"

clean-airflow: ## 🌊 Remove Airflow data and logs (DESTRUCTIVE)
	@$(ECHO_CMD) "$(RED)WARNING: This will remove all Airflow data!$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Press Ctrl+C to cancel, or Enter to continue...$(NC)\n"
	@read -p ""
	@$(ECHO_CMD) "$(YELLOW)Stopping Airflow services...$(NC)\n"
	@$(MAKE) airflow-stop 2>/dev/null || echo -e "$(YELLOW)Airflow services not running$(NC)"
	@$(ECHO_CMD) "$(YELLOW)Cleaning Airflow data...$(NC)\n"
	@rm -rf airflow/logs/* 2>/dev/null || true
	@rm -f airflow/*.db 2>/dev/null || true
	@rm -f airflow/*.out airflow/*.err 2>/dev/null || true
	@rm -f airflow/*.pid 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Airflow data cleaned$(NC)\n"

clean-docker: ## 🧹 Remove Docker containers and images (if Docker is available)
	@$(ECHO_CMD) "$(YELLOW)Cleaning Docker resources...$(NC)\n"
ifeq ($(HAS_DOCKER),yes)
	@$(ECHO_CMD) "$(CYAN)Stopping and removing containers...$(NC)\n"
	@$(DOCKER_CMD) container prune -f 2>/dev/null || true
	@$(ECHO_CMD) "$(CYAN)Removing unused images...$(NC)\n"
	@$(DOCKER_CMD) image prune -f 2>/dev/null || true
	@$(ECHO_CMD) "$(CYAN)Removing unused volumes...$(NC)\n"
	@$(DOCKER_CMD) volume prune -f 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Docker resources cleaned$(NC)\n"
else
	@$(ECHO_CMD) "$(YELLOW)⚠ Docker not available$(NC)\n"
endif

clean-git: ## 🧹 Clean Git repository (remove untracked files)
	@$(ECHO_CMD) "$(YELLOW)Cleaning Git repository...$(NC)\n"
ifeq ($(HAS_GIT),yes)
	@$(ECHO_CMD) "$(CYAN)Showing untracked files:$(NC)\n"
	@$(GIT_CMD) status --porcelain | grep "^??" || echo -e "$(GREEN)No untracked files$(NC)"
	@$(ECHO_CMD) "$(YELLOW)Remove untracked files? (y/N):$(NC)\n"
	@read -p "" confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		$(GIT_CMD) clean -fd; \
		echo -e "$(GREEN)✓ Untracked files removed$(NC)"; \
	else \
		echo -e "$(YELLOW)Skipped cleaning untracked files$(NC)"; \
	fi
else
	@$(ECHO_CMD) "$(YELLOW)⚠ Git not available$(NC)\n"
endif

# ============================================================================
# COMPREHENSIVE CLEANUP OPERATIONS
# ============================================================================

.PHONY: clean-all clean-reset clean-development clean-production

clean-all: ## 🧹 Complete cleanup (DESTRUCTIVE - removes everything)
	@$(ECHO_CMD) "$(RED)WARNING: This will remove ALL data, environments, and artifacts!$(NC)\n"
	@$(ECHO_CMD) "$(RED)This includes:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • Virtual environment$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • Database data$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • Airflow data$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • All build artifacts$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)  • All cache and logs$(NC)\n"
	@$(ECHO_CMD) "$(RED)Type 'DELETE' to confirm, or Ctrl+C to cancel:$(NC)\n"
	@read -p "" confirm && \
	if [ "$$confirm" = "DELETE" ]; then \
		echo -e "$(YELLOW)Performing complete cleanup...$(NC)"; \
		$(MAKE) clean; \
		$(MAKE) clean-env; \
		$(MAKE) clean-db; \
		$(MAKE) clean-airflow; \
		$(MAKE) clean-docker; \
		echo -e "$(GREEN)✓ Complete cleanup finished$(NC)"; \
	else \
		echo -e "$(YELLOW)Cleanup cancelled$(NC)"; \
	fi

clean-reset: clean-all ## 🧹 Complete cleanup and prepare for fresh setup
	@$(ECHO_CMD) "$(BLUE)Preparing for fresh setup...$(NC)\n"
	@$(ECHO_CMD) "$(CYAN)Run 'make setup' to reinitialize the project$(NC)\n"

clean-development: ## 🧹 Clean development-related artifacts only
	@$(ECHO_CMD) "$(BLUE)Cleaning development artifacts...$(NC)\n"
	@$(MAKE) clean-build
	@$(MAKE) clean-cache
	@$(MAKE) clean-coverage
	@$(MAKE) clean-temp
	@rm -f quality-report.md pylint-report.txt mypy-report.txt 2>/dev/null || true
	@rm -f bandit-report.json safety-report.json 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Development cleanup completed$(NC)\n"

clean-production: ## 🧹 Clean production deployment artifacts
	@$(ECHO_CMD) "$(BLUE)Cleaning production artifacts...$(NC)\n"
	@$(MAKE) clean-build
	@$(MAKE) clean-logs
	@$(MAKE) clean-temp
	@$(ECHO_CMD) "$(GREEN)✓ Production cleanup completed$(NC)\n"

# ============================================================================
# CLEANUP INFORMATION AND ANALYSIS
# ============================================================================

.PHONY: clean-info clean-size clean-preview

clean-info: ## 🧹 Display cleanup targets and current disk usage
	@$(ECHO_CMD) "$(CYAN)Cleanup Information:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Cleanup Targets:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Build Artifacts:$(NC)\n"
	@for dir in $(BUILD_DIRS); do \
		if [ -d "$$dir" ] || [ -f "$$dir" ]; then \
			size=$$(du -sh "$$dir" 2>/dev/null | cut -f1 || echo "?"); \
			echo -e "  $$dir ($$size)"; \
		fi; \
	done
	@$(ECHO_CMD) "$(YELLOW)Cache Directories:$(NC)\n"
	@for dir in $(CACHE_DIRS); do \
		if [ -d "$$dir" ]; then \
			size=$$(du -sh "$$dir" 2>/dev/null | cut -f1 || echo "?"); \
			echo -e "  $$dir ($$size)"; \
		fi; \
	done
	@$(ECHO_CMD) "$(YELLOW)Virtual Environment:$(NC)\n"
	@if [ -d "$(VENV_PATH)" ]; then \
		size=$$(du -sh "$(VENV_PATH)" 2>/dev/null | cut -f1 || echo "?"); \
		echo -e "  $(VENV_PATH) ($$size)"; \
	else \
		echo -e "  $(VENV_PATH) (not found)"; \
	fi

clean-size: ## 🧹 Display disk space that would be freed by cleanup
	@$(ECHO_CMD) "$(CYAN)Disk Space Analysis:$(NC)\n"
	@total_size=0; \
	echo -e "$(YELLOW)Space to be freed:$(NC)"; \
	for dir in $(BUILD_DIRS) $(CACHE_DIRS); do \
		if [ -d "$$dir" ]; then \
			size=$$(du -sk "$$dir" 2>/dev/null | cut -f1 || echo "0"); \
			size_mb=$$((size / 1024)); \
			if [ $$size_mb -gt 0 ]; then \
				echo -e "  $$dir: $${size_mb}MB"; \
				total_size=$$((total_size + size_mb)); \
			fi; \
		fi; \
	done; \
	if [ -d "$(VENV_PATH)" ]; then \
		venv_size=$$(du -sk "$(VENV_PATH)" 2>/dev/null | cut -f1 || echo "0"); \
		venv_mb=$$((venv_size / 1024)); \
		if [ $$venv_mb -gt 0 ]; then \
			echo -e "  $(VENV_PATH): $${venv_mb}MB (virtual environment)"; \
		fi; \
	fi; \
	echo -e "$(GREEN)Total reclaimable space: $${total_size}MB$(NC)"

clean-preview: ## 🧹 Preview what would be cleaned without actually cleaning
	@$(ECHO_CMD) "$(CYAN)Cleanup Preview (no files will be removed):$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Files and directories that would be removed:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Build artifacts:$(NC)\n"
	@for dir in $(BUILD_DIRS); do \
		if [ -d "$$dir" ] || [ -f "$$dir" ]; then \
			echo -e "  ✓ $$dir"; \
		fi; \
	done
	@$(ECHO_CMD) "$(YELLOW)Cache directories:$(NC)\n"
	@for dir in $(CACHE_DIRS); do \
		if [ -d "$$dir" ]; then \
			echo -e "  ✓ $$dir"; \
		fi; \
	done
	@$(ECHO_CMD) "$(YELLOW)Coverage files:$(NC)\n"
	@for file in $(COVERAGE_FILES); do \
		if [ -f "$$file" ] || [ -d "$$file" ]; then \
			echo -e "  ✓ $$file"; \
		fi; \
	done
	@$(ECHO_CMD) "$(YELLOW)Python cache files:$(NC)\n"
	@find . -name "*.pyc" -type f 2>/dev/null | head -5 | sed 's/^/  ✓ /' || echo "  (none found)"
	@pyc_count=$$(find . -name "*.pyc" -type f 2>/dev/null | wc -l); \
	if [ $$pyc_count -gt 5 ]; then \
		echo -e "  ... and $$((pyc_count - 5)) more .pyc files"; \
	fi

# ============================================================================
# SAFE CLEANUP OPERATIONS
# ============================================================================

.PHONY: clean-safe clean-interactive clean-minimal

clean-safe: ## 🧹 Safe cleanup (only cache and build artifacts)
	@$(ECHO_CMD) "$(BLUE)Performing safe cleanup...$(NC)\n"
	@$(MAKE) clean-build
	@$(MAKE) clean-cache
	@$(MAKE) clean-temp
	@$(ECHO_CMD) "$(GREEN)✓ Safe cleanup completed$(NC)\n"

clean-interactive: ## 🧹 Interactive cleanup with confirmation for each step
	@$(ECHO_CMD) "$(CYAN)Interactive Cleanup$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Clean build artifacts? (y/N):$(NC)\n"
	@read -p "" confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		$(MAKE) clean-build; \
	fi
	@$(ECHO_CMD) "$(YELLOW)Clean cache directories? (y/N):$(NC)\n"
	@read -p "" confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		$(MAKE) clean-cache; \
	fi
	@$(ECHO_CMD) "$(YELLOW)Clean coverage data? (y/N):$(NC)\n"
	@read -p "" confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		$(MAKE) clean-coverage; \
	fi
	@$(ECHO_CMD) "$(YELLOW)Clean log files? (y/N):$(NC)\n"
	@read -p "" confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		$(MAKE) clean-logs; \
	fi
	@$(ECHO_CMD) "$(GREEN)✓ Interactive cleanup completed$(NC)\n"

clean-minimal: ## 🧹 Minimal cleanup (only Python cache)
	@$(ECHO_CMD) "$(BLUE)Performing minimal cleanup...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Removing Python cache files...$(NC)\n"
	@find . -name "*.pyc" -type f -delete 2>/dev/null || true
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@$(ECHO_CMD) "$(GREEN)✓ Minimal cleanup completed$(NC)\n"

# ============================================================================
# CLEANUP UTILITIES
# ============================================================================

.PHONY: clean-help clean-status

clean-help: ## 🧹 Display detailed cleanup help and options
	@$(ECHO_CMD) "$(CYAN)Cleanup Help and Options:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Safe Cleanup Commands:$(NC)\n"
	@$(ECHO_CMD) "  make clean-safe        # Only cache and build artifacts\n"
	@$(ECHO_CMD) "  make clean-minimal     # Only Python cache files\n"
	@$(ECHO_CMD) "  make clean-development # Development artifacts only\n"
	@$(ECHO_CMD) "\n"
	@$(ECHO_CMD) "$(YELLOW)Selective Cleanup Commands:$(NC)\n"
	@$(ECHO_CMD) "  make clean-build       # Build directories and artifacts\n"
	@$(ECHO_CMD) "  make clean-cache       # Python and tool cache directories\n"
	@$(ECHO_CMD) "  make clean-coverage    # Coverage reports and data\n"
	@$(ECHO_CMD) "  make clean-logs        # Log files and directories\n"
	@$(ECHO_CMD) "  make clean-temp        # Temporary files and directories\n"
	@$(ECHO_CMD) "\n"
	@$(ECHO_CMD) "$(RED)Destructive Cleanup Commands:$(NC)\n"
	@$(ECHO_CMD) "  make clean-env         # Virtual environment (requires confirmation)\n"
	@$(ECHO_CMD) "  make clean-db          # Database data (requires confirmation)\n"
	@$(ECHO_CMD) "  make clean-airflow     # Airflow data (requires confirmation)\n"
	@$(ECHO_CMD) "  make clean-all         # Everything (requires 'DELETE' confirmation)\n"
	@$(ECHO_CMD) "\n"
	@$(ECHO_CMD) "$(YELLOW)Information Commands:$(NC)\n"
	@$(ECHO_CMD) "  make clean-info        # Show cleanup targets and disk usage\n"
	@$(ECHO_CMD) "  make clean-preview     # Preview what would be cleaned\n"
	@$(ECHO_CMD) "  make clean-size        # Show disk space that would be freed\n"

clean-status: ## 🧹 Display current cleanup status and recommendations
	@$(ECHO_CMD) "$(CYAN)Cleanup Status:$(NC)\n"
	@artifact_count=0; \
	for dir in $(BUILD_DIRS) $(CACHE_DIRS); do \
		if [ -d "$$dir" ]; then \
			artifact_count=$$((artifact_count + 1)); \
		fi; \
	done; \
	pyc_count=$$(find . -name "*.pyc" -type f 2>/dev/null | wc -l); \
	echo -e "$(YELLOW)Current State:$(NC)"; \
	echo -e "  Artifact directories: $$artifact_count"; \
	echo -e "  Python cache files: $$pyc_count"; \
	if [ -d "$(VENV_PATH)" ]; then \
		echo -e "  Virtual environment: ✓ Present"; \
	else \
		echo -e "  Virtual environment: ❌ Missing"; \
	fi; \
	echo -e "$(YELLOW)Recommendations:$(NC)"; \
	if [ $$artifact_count -gt 0 ] || [ $$pyc_count -gt 10 ]; then \
		echo -e "  $(CYAN)Run 'make clean-safe' to clean build artifacts$(NC)"; \
	else \
		echo -e "  $(GREEN)Project is clean$(NC)"; \
	fi
