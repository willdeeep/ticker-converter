# ============================================================================
# INSTALLATION AND DEPENDENCY MANAGEMENT
# ============================================================================
# This module handles cross-platform dependency installation and package
# management for development, testing, and production environments
#
# Dependencies: Makefile.platform, Makefile.env
# ============================================================================

# ============================================================================
# SYSTEM DEPENDENCY INSTALLATION
# ============================================================================

.PHONY: check-tools install-system-deps _suggest_system_install

check-tools: ## ⚙️ Verify required system tools availability
	@$(ECHO_CMD) "$(CYAN)Checking system tool availability...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Required Tools:$(NC)\n"
	@$(ECHO_CMD) "  Python: $(if $(HAS_PYTHON),$(GREEN)✓ Available,$(RED)❌ Missing) $(if $(PYTHON_CMD),- $(PYTHON_CMD),)$(NC)\n"
	@$(ECHO_CMD) "  Git: $(if $(HAS_GIT),$(GREEN)✓ Available,$(RED)❌ Missing) $(if $(GIT_CMD),- $(GIT_CMD),)$(NC)\n"
	@$(ECHO_CMD) "  PostgreSQL: $(if $(HAS_PSQL),$(GREEN)✓ Available,$(RED)❌ Missing) $(if $(PSQL_CMD),- $(PSQL_CMD),)$(NC)\n"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)Optional Tools:$(NC)\n"
	@$(ECHO_CMD) "  pyenv: $(if $(HAS_PYENV),$(GREEN)✓ Available,$(YELLOW)○ Optional) $(if $(PYENV_CMD),- $(PYENV_CMD),)$(NC)\n"
	@$(ECHO_CMD) "  Docker: $(if $(HAS_DOCKER),$(GREEN)✓ Available,$(YELLOW)○ Optional) $(if $(DOCKER_CMD),- $(DOCKER_CMD),)$(NC)\n"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)Package Managers:$(NC)\n"
ifeq ($(PLATFORM_OS),macos)
	@$(ECHO_CMD) "  Homebrew: $(if $(HAS_BREW),$(GREEN)✓ Available,$(YELLOW)○ Recommended) $(if $(BREW_CMD),- $(BREW_CMD),)$(NC)\n"
else ifeq ($(PLATFORM_OS),linux)
	@$(ECHO_CMD) "  APT: $(if $(HAS_APT),$(GREEN)✓ Available,$(YELLOW)○ N/A) $(if $(APT_CMD),- $(APT_CMD),)$(NC)\n"
	@$(ECHO_CMD) "  YUM: $(if $(HAS_YUM),$(GREEN)✓ Available,$(YELLOW)○ N/A) $(if $(YUM_CMD),- $(YUM_CMD),)$(NC)\n"
else ifeq ($(PLATFORM_OS),windows)
	@$(ECHO_CMD) "  Chocolatey: $(if $(HAS_CHOCO),$(GREEN)✓ Available,$(YELLOW)○ Recommended) $(if $(CHOCO_CMD),- $(CHOCO_CMD),)$(NC)\n"
endif
ifeq ($(HAS_PYTHON)$(HAS_GIT)$(HAS_PSQL),nonono)
	@$(ECHO_CMD) "$(RED)Error: Critical tools missing. Run 'make install-system-deps' to install.$(NC)\n"
	@exit 1
else ifeq ($(HAS_PYTHON)$(HAS_GIT),nono)
	@$(ECHO_CMD) "$(RED)Error: Python and Git are required. Run 'make install-system-deps' to install.$(NC)\n"
	@exit 1
else ifeq ($(HAS_PYTHON),no)
	@$(ECHO_CMD) "$(RED)Error: Python is required. Run 'make install-system-deps' to install.$(NC)\n"
	@exit 1
else ifeq ($(HAS_GIT),no)
	@$(ECHO_CMD) "$(RED)Error: Git is required. Run 'make install-system-deps' to install.$(NC)\n"
	@exit 1
else
	@$(ECHO_CMD) "$(GREEN)✓ All critical tools are available$(NC)\n"
endif

install-system-deps: ## 📦 Install system-level dependencies
	@$(ECHO_CMD) "$(BLUE)Installing system dependencies...$(NC)\n"
ifeq ($(PLATFORM_OS),macos)
	@$(MAKE) _install_macos_deps
else ifeq ($(PLATFORM_OS),linux)
	@$(MAKE) _install_linux_deps
else ifeq ($(PLATFORM_OS),windows)
	@$(MAKE) _install_windows_deps
else
	@$(ECHO_CMD) "$(RED)Error: Unsupported platform for automatic installation$(NC)\n"
	@$(MAKE) _suggest_manual_install
	@exit 1
endif
	@$(ECHO_CMD) "$(GREEN)✓ System dependencies installation completed$(NC)\n"

_install_macos_deps: ## Internal: Install macOS dependencies
	@$(ECHO_CMD) "$(YELLOW)Installing macOS dependencies...$(NC)\n"
ifeq ($(HAS_BREW),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Homebrew...$(NC)\n"
	@/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
endif
ifeq ($(HAS_PYTHON),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Python...$(NC)\n"
	@$(BREW_CMD) install python@3.11
endif
ifeq ($(HAS_GIT),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Git...$(NC)\n"
	@$(BREW_CMD) install git
endif
ifeq ($(HAS_PSQL),no)
	@$(ECHO_CMD) "$(YELLOW)Installing PostgreSQL...$(NC)\n"
	@$(BREW_CMD) install postgresql@15
	@$(BREW_CMD) services start postgresql@15
endif
ifeq ($(HAS_PYENV),no)
	@$(ECHO_CMD) "$(YELLOW)Installing pyenv (recommended)...$(NC)\n"
	@$(BREW_CMD) install pyenv
endif

_install_linux_deps: ## Internal: Install Linux dependencies
	@$(ECHO_CMD) "$(YELLOW)Installing Linux dependencies...$(NC)\n"
ifeq ($(HAS_APT),yes)
	@sudo apt update
ifeq ($(HAS_PYTHON),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Python...$(NC)\n"
	@sudo apt install -y python3 python3-pip python3-venv python3-dev
endif
ifeq ($(HAS_GIT),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Git...$(NC)\n"
	@sudo apt install -y git
endif
ifeq ($(HAS_PSQL),no)
	@$(ECHO_CMD) "$(YELLOW)Installing PostgreSQL...$(NC)\n"
	@sudo apt install -y postgresql postgresql-contrib
	@sudo systemctl start postgresql
	@sudo systemctl enable postgresql
endif
else ifeq ($(HAS_YUM),yes)
	@sudo yum update -y
ifeq ($(HAS_PYTHON),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Python...$(NC)\n"
	@sudo yum install -y python3 python3-pip python3-devel
endif
ifeq ($(HAS_GIT),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Git...$(NC)\n"
	@sudo yum install -y git
endif
ifeq ($(HAS_PSQL),no)
	@$(ECHO_CMD) "$(YELLOW)Installing PostgreSQL...$(NC)\n"
	@sudo yum install -y postgresql-server postgresql-contrib
	@sudo postgresql-setup initdb
	@sudo systemctl start postgresql
	@sudo systemctl enable postgresql
endif
else
	@$(ECHO_CMD) "$(YELLOW)Package manager not detected. Please install manually:$(NC)\n"
	@$(MAKE) _suggest_manual_install
endif

_install_windows_deps: ## Internal: Install Windows dependencies
	@$(ECHO_CMD) "$(YELLOW)Installing Windows dependencies...$(NC)\n"
ifeq ($(HAS_CHOCO),yes)
ifeq ($(HAS_PYTHON),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Python...$(NC)\n"
	@choco install python -y
endif
ifeq ($(HAS_GIT),no)
	@$(ECHO_CMD) "$(YELLOW)Installing Git...$(NC)\n"
	@choco install git -y
endif
ifeq ($(HAS_PSQL),no)
	@$(ECHO_CMD) "$(YELLOW)Installing PostgreSQL...$(NC)\n"
	@choco install postgresql -y
endif
else
	@$(ECHO_CMD) "$(YELLOW)Chocolatey not available. Please install manually:$(NC)\n"
	@$(MAKE) _suggest_manual_install
endif

_suggest_manual_install: ## Internal: Suggest manual installation steps
	@$(ECHO_CMD) "$(CYAN)Manual Installation Guide:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Python 3.11+:$(NC) https://www.python.org/downloads/\n"
	@$(ECHO_CMD) "$(YELLOW)Git:$(NC) https://git-scm.com/downloads\n"
	@$(ECHO_CMD) "$(YELLOW)PostgreSQL:$(NC) https://www.postgresql.org/download/\n"

# ============================================================================
# PYTHON PACKAGE INSTALLATION
# ============================================================================

.PHONY: install install-test install-all pip-list pip-outdated pip-update

install: _load_env _setup_python_environment ## 📦 Install production dependencies
	@$(ECHO_CMD) "$(BLUE)Installing production dependencies...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Installing core packages from pyproject.toml...$(NC)\n"
	@$(PIP) install -e . --quiet
	@$(ECHO_CMD) "$(GREEN)✓ Production dependencies installed$(NC)\n"

install-test: _load_env _setup_python_environment ## 🧪 Install testing dependencies
	@$(ECHO_CMD) "$(BLUE)Installing testing dependencies...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Installing test packages...$(NC)\n"
	@$(PIP) install -e ".[test]" --quiet
	@$(ECHO_CMD) "$(GREEN)✓ Testing dependencies installed$(NC)\n"

install-all: _load_env _setup_python_environment ## 📦 Install all dependencies (runtime + test)
	@$(ECHO_CMD) "$(BLUE)Installing all dependencies...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Installing complete package set...$(NC)\n"
	@$(PIP) install -e ".[test]" --quiet
	@$(ECHO_CMD) "$(GREEN)✓ All dependencies installed$(NC)\n"

pip-list: ## 📦 List and display installed packages
	@$(ECHO_CMD) "$(CYAN)Installed Python packages:$(NC)\n"
	@$(PIP) list

pip-outdated: ## 📦 Validate for package updates
	@$(ECHO_CMD) "$(CYAN)Checking for outdated packages:$(NC)\n"
	@$(PIP) list --outdated

pip-update: ## 📦 Update pip and setuptools
	@$(ECHO_CMD) "$(YELLOW)Updating pip and setuptools...$(NC)\n"
	@$(PIP) install --upgrade pip setuptools --quiet
	@$(ECHO_CMD) "$(GREEN)✓ Package tools updated$(NC)\n"

# ============================================================================
# INSTALLATION VALIDATION
# ============================================================================

.PHONY: check-install validate-install _check_package_group

check-install: ## 📦 Validate installation completeness
	@$(ECHO_CMD) "$(CYAN)Validating installation...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Checking Python environment...$(NC)\n"
	@$(PYTHON) --version
	@$(ECHO_CMD) "$(YELLOW)Checking pip functionality...$(NC)\n"
	@$(PIP) --version
	@$(ECHO_CMD) "$(YELLOW)Checking core package installation...$(NC)\n"
	@$(MAKE) _check_package_group GROUP=core
	@$(ECHO_CMD) "$(GREEN)✓ Installation validation completed$(NC)\n"

validate-install: ## 📦 Comprehensive installation validation with imports
	@$(ECHO_CMD) "$(CYAN)Comprehensive installation validation...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Testing core imports...$(NC)\n"
	@$(PYTHON) -c "import ticker_converter; print('✓ ticker_converter module available')"
	@$(PYTHON) -c "import requests; print('✓ requests available')"
	@$(PYTHON) -c "import pandas; print('✓ pandas available')"
	@$(PYTHON) -c "import psycopg2; print('✓ psycopg2 available')" 2>/dev/null || echo -e "$(YELLOW)⚠ psycopg2 not available (install-test or install-dev needed)$(NC)"
	@$(PYTHON) -c "import pytest; print('✓ pytest available')" 2>/dev/null || echo -e "$(YELLOW)⚠ pytest not available (install-test or install-dev needed)$(NC)"
	@$(PYTHON) -c "import black; print('✓ black available')" 2>/dev/null || echo -e "$(YELLOW)⚠ black not available (install-test needed)$(NC)"
	@$(ECHO_CMD) "$(GREEN)✓ Installation validation completed$(NC)\n"

_check_package_group: ## Internal: Check if package group is installed
	@case "$(GROUP)" in \
		"core") \
			$(PYTHON) -c "import ticker_converter" 2>/dev/null && echo -e "$(GREEN)✓ Core packages installed$(NC)" || \
			(echo -e "$(RED)❌ Core packages missing. Run 'make install'$(NC)" && exit 1) ;; \
		"test") \
			$(PYTHON) -c "import pytest" 2>/dev/null && echo -e "$(GREEN)✓ Test packages installed$(NC)" || \
			(echo -e "$(RED)❌ Test packages missing. Run 'make install-test'$(NC)" && exit 1) ;; \
		"dev") \
			$(PYTHON) -c "import black" 2>/dev/null && echo -e "$(GREEN)✓ Dev packages installed$(NC)" || \
			(echo -e "$(RED)❌ Dev packages missing. Run 'make install-test'$(NC)" && exit 1) ;; \
		*) \
			echo -e "$(RED)Unknown package group: $(GROUP)$(NC)" && exit 1 ;; \
	esac

# ============================================================================
# DEPENDENCY ANALYSIS
# ============================================================================

.PHONY: deps-tree deps-check deps-security

deps-tree: ## 📦 Display dependency tree
	@$(ECHO_CMD) "$(CYAN)Dependency tree:$(NC)\n"
	@if $(PYTHON) -c "import pipdeptree" 2>/dev/null; then \
		$(PYTHON) -m pipdeptree; \
	else \
		echo -e "$(YELLOW)pipdeptree not available. Install with: pip install pipdeptree$(NC)"; \
		$(PIP) list; \
	fi

deps-check: ## 📦 Validate for dependency conflicts
	@$(ECHO_CMD) "$(CYAN)Checking for dependency conflicts...$(NC)\n"
	@$(PIP) check && echo -e "$(GREEN)✓ No dependency conflicts found$(NC)" || \
	echo -e "$(RED)❌ Dependency conflicts detected$(NC)"

deps-security: ## 📦 Validate for security vulnerabilities in dependencies
	@$(ECHO_CMD) "$(CYAN)Scanning for security vulnerabilities...$(NC)\n"
	@if $(PYTHON) -c "import safety" 2>/dev/null; then \
		$(PYTHON) -m safety check; \
	else \
		echo -e "$(YELLOW)Safety not available. Install with: pip install safety$(NC)"; \
		echo -e "$(YELLOW)Alternatively, run: make install-test$(NC)"; \
	fi

# ============================================================================
# INSTALLATION WORKFLOWS
# ============================================================================

.PHONY: fresh-install quick-install developer-setup

# ============================================================================
# INSTALLATION DEBUGGING AND TROUBLESHOOTING
# ============================================================================

.PHONY: install-debug install-info install-doctor

install-debug: ## 📦 Debug and troubleshoot installation issues
	@$(ECHO_CMD) "$(CYAN)Installation debug information:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Platform Information:$(NC)\n"
	@$(ECHO_CMD) "  OS: $(PLATFORM_OS)\n"
	@$(ECHO_CMD) "  Architecture: $(PLATFORM_ARCH)\n"
	@$(ECHO_CMD) "  Family: $(PLATFORM_FAMILY)\n"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)Python Environment:$(NC)\n"
	@$(ECHO_CMD) "  Python Command: $(PYTHON)\n"
	@$(ECHO_CMD) "  Python Version: $(shell $(PYTHON) --version 2>/dev/null || echo 'Not Available')\n"
	@$(ECHO_CMD) "  Virtual Environment: $(if $(wildcard $(VENV_PYTHON)),Active ($(VENV_PATH)),Not Active)\n"
	@$(ECHO_CMD) "  Pip Command: $(PIP)\n"
	@$(ECHO_CMD) "  Pip Version: $(shell $(PIP) --version 2>/dev/null || echo 'Not Available')\n"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)Package Installation Status:$(NC)\n"
	@$(PYTHON) -c "import ticker_converter; print('✓ Core package installed')" 2>/dev/null || echo "❌ Core package not installed"
	@$(PYTHON) -c "import pytest; print('✓ Test dependencies installed')" 2>/dev/null || echo "○ Test dependencies not installed"
	@$(PYTHON) -c "import black; print('✓ Dev dependencies installed')" 2>/dev/null || echo "○ Dev dependencies not installed"

install-info: ## 📦 Display installation information and recommendations
	@$(ECHO_CMD) "$(CYAN)Installation Information:$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)Available Installation Commands:$(NC)\n"
	@$(ECHO_CMD) "  make install          # Production runtime only\n"
	@$(ECHO_CMD) "  make install-test     # Production + testing tools\n"
	@$(ECHO_CMD) "  make install-test     # Production + testing + development tools\n"
	@$(ECHO_CMD) "  make install-all      # Complete installation\n"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)Recommended Workflows:$(NC)\n"
	@$(ECHO_CMD) "  Production:           make install\n"
	@$(ECHO_CMD) "  CI/CD:                make install-test\n"
	@$(ECHO_CMD) "  Development:          make install-test\n"
	@$(ECHO_CMD) "  Complete Setup:       make setup && make install-test\n"

install-doctor: ## 📦 Diagnose and suggest fixes for installation problems
	@$(ECHO_CMD) "$(CYAN)Installation Doctor - Diagnosing Issues...$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)\n"
	@$(ECHO_CMD) "$(YELLOW)1. Checking system requirements...$(NC)\n"
	@$(MAKE) check-tools 2>/dev/null || echo -e "$(RED)Issue: Missing system tools$(NC)"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)2. Checking Python environment...$(NC)\n"
	@if [ ! -f $(VENV_PYTHON) ]; then \
		echo -e "$(RED)Issue: Virtual environment not found$(NC)"; \
		echo -e "$(CYAN)Fix: Run 'make setup' to create virtual environment$(NC)"; \
	else \
		echo -e "$(GREEN)✓ Virtual environment available$(NC)"; \
	fi
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)3. Checking package installation...$(NC)\n"
	@$(MAKE) _check_package_group GROUP=core 2>/dev/null || \
		echo -e "$(CYAN)Fix: Run 'make install' to install core packages$(NC)"
	@echo ""
	@$(ECHO_CMD) "$(YELLOW)4. Checking dependency conflicts...$(NC)\n"
	@$(MAKE) deps-check 2>/dev/null || \
		echo -e "$(CYAN)Fix: Review conflicts and update packages$(NC)"
	@$(ECHO_CMD) "$(YELLOW)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NC)\n"

# Export installation-related variables
export PYTHON
export PIP
