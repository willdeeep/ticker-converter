name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-venv-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-venv-

    - name: Create virtual environment and install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Install system-level quality tools (optional)
      run: |
        # Install sqlfluff for enhanced SQL linting
        source .venv/bin/activate
        pip install sqlfluff
        # Skip checkmake for now due to upstream repository issues
        echo "ℹ️  checkmake skipped due to upstream repository path conflicts (graceful degradation)"

    - name: Run comprehensive CI/CD validation pipeline
      run: |
        source .venv/bin/activate
        
        # Create .env file for testing from example template
        cp .env.example .env
        
        # Override with CI-appropriate values
        sed -i 's/your_alpha_vantage_api_key_here/test_api_key/' .env
        sed -i 's/localhost/localhost/' .env
        sed -i 's/local_db/ticker_converter/' .env
        sed -i 's/dbuser123/ticker_user/' .env
        sed -i 's/password123/ticker_password/' .env
        sed -i 's/admin1/admin/' .env
        sed -i 's/test123/admin_password/' .env
        sed -i 's/admin1@test.local/admin@example.com/' .env
        sed -i 's/your-secure-jwt-secret-key-change-for-production/test-jwt-secret/' .env

        # Run the comprehensive CI/CD validation pipeline (includes tests + quality)
        make validate-ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
