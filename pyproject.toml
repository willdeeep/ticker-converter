[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ticker-converter"
version = "3.2.2"
description = "Stock ticker conversion and analysis pipeline"
readme = "README.md"
requires-python = "==3.11.12"
license = {text = "MIT"}
authors = [
    {name = "Will Huntley-Clarke", email = "23581815+willdeeep@users.noreply.github.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # Core FastAPI and web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",

    # Database and data processing
    "psycopg2-binary>=2.9.7",
    "asyncpg>=0.28.0",
    "pandas>=2.1.0",

    # HTTP client and utilities
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    "python-dotenv>=1.0.0",

    # System utilities
    "psutil>=5.9.0",

    # Workflow orchestration
    "apache-airflow>=3.0.4",
    "apache-airflow-providers-fab>=1.0.0",
    "apache-airflow-providers-postgres>=6.0.0",
]

[project.optional-dependencies]
test = [
    # Testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.24.0",
    "responses>=0.23.0",
    "graphviz>=0.21",

    # Code quality and linting tools
    "pylint>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "sqlfluff>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",

    # Type stubs for mypy (only what's actually needed)
    "types-psutil>=5.9.0",

    # Development tools
    "pre-commit>=3.4.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/willdeeep/ticker-converter"
Repository = "https://github.com/willdeeep/ticker-converter"
Issues = "https://github.com/willdeeep/ticker-converter/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Tool configurations
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["ticker_converter"]

[tool.pylint.master]
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "missing-module-docstring",
    "broad-exception-caught",
    "f-string-without-interpolation",
    "invalid-name",
    "line-too-long",
    # API client complexity suppressions - these are acceptable for comprehensive API handling
    "too-many-instance-attributes",  # API client needs multiple config attributes
    "too-many-branches",             # Error handling requires many conditionals
    "too-many-statements",           # Comprehensive error handling and retry logic
    "duplicate-code",                # Minor duplication in data processing patterns
    "no-else-raise",                 # Acceptable in error handling chains
    "no-else-continue",              # Acceptable in retry logic patterns
    # Temporary DAG file suppressions for Airflow 3.0 compatibility
    "import-error",                  # DAG helper modules may not be in PYTHONPATH during linting
    "wrong-import-position",         # DAG files require sys.path manipulation
    "wrong-import-order",            # DAG files have complex import requirements
    "unexpected-keyword-arg",        # Airflow 3.0 API changes
    "missing-function-docstring",    # DAG task functions often have descriptive names
    "redefined-outer-name",          # Acceptable in DAG task context
    "unnecessary-pass",              # Placeholder tasks during development
    "pointless-statement",           # Task dependency statements
    "unused-import",                 # May be used in task context
    "import-outside-toplevel",       # DAG tasks may require conditional imports
    "too-many-locals",               # DAG tasks may need many variables
    "no-else-return",                # Acceptable in DAG task logic
    "reimported",                    # DAG tasks may need reimports
]

[tool.pylint.format]
max-line-length = 120

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
# Remove global ignore - be explicit about missing imports
ignore_missing_imports = false
# Strict mode for better type safety
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
# Add explicit paths for src layout
mypy_path = ["src"]
packages = ["ticker_converter"]
explicit_package_bases = true

# Per-module configurations for specific libraries that need it
[[tool.mypy.overrides]]
module = [
    "psycopg2.*",
    "airflow.*",
    "asyncpg.*",
    "pandas.*",
    "aiohttp.*",
    "pydantic_settings.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/ticker_converter"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from for exceptions (sometimes not needed)
    "C901",  # too complex (handled by other tools)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["E501", "F401", "F811"]  # Allow longer lines and unused imports in tests
