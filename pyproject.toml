[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ticker-converter"
version = "0.1.2"
description = "Financial Market Data Analytics Pipeline for SCSK"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Will Huntley-Clarke", email = "23581815+willdeeep@users.noreply.github.com"}
]
keywords = ["finance", "etl", "airflow", "data-pipeline", "analytics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.9"
dependencies = [
    # Core Data Processing (minimal for API work)
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    # API Clients for Financial Data
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    # Data Models and Validation
    "pydantic>=2.0.0",
    # Storage (for Issue #2)
    "pyarrow>=12.0.0",
    # Testing Framework (basic)
    "pytest>=7.4.0",
    # Code Quality and Linting
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    # Type stubs for mypy
    "pandas-stubs>=2.0.0",
    "types-requests>=2.31.0",
    # Utility Libraries
    "click>=8.1.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
# Additional packages for later GitHub issues
storage = [
    "pyarrow>=12.0.0",  # For Parquet support (Issue #2)
]
database = [
    "psycopg2-binary>=2.9.0",  # PostgreSQL adapter (Issue #4)
    "sqlalchemy>=2.0.0",      # ORM and database toolkit
    "alembic>=1.11.0",        # Database migrations
]
airflow = [
    "apache-airflow>=2.7.0",                      # (Issue #5)
    "apache-airflow-providers-postgres>=5.6.0",
    "apache-airflow-providers-http>=4.5.0",
]
models = [
    "pydantic>=2.0.0",  # Data validation (Issue #3)
]
api = [
    "fastapi>=0.100.0",        # Web Framework (Issue #6)
    "uvicorn[standard]>=0.23.0",
    "httpx>=0.24.0",           # For testing FastAPI
]
dev = [
    # Additional testing tools
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "responses>=0.24.0",
    "faker>=19.0.0",
    # Development tools
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "nbconvert>=7.7.0",
    # Code quality & security
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    # Performance profiling
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
    # Database tools
    "pgcli>=3.5.0",
]
cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
]
viz = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]
auth = [
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
]
monitoring = [
    "structlog>=23.1.0",
    "prometheus-client>=0.17.0",
]
async = [
    "aiofiles>=23.1.0",
    "asyncpg>=0.28.0",
]
# Convenience groups
all = [
    "ticker-converter[storage,database,airflow,models,api,dev,cloud,viz,auth,monitoring,async]"
]

[project.scripts]
ticker-converter = "ticker_converter.cli:main"

[project.urls]
Homepage = "https://github.com/willdeeep/ticker-converter"
Repository = "https://github.com/willdeeep/ticker-converter"
Issues = "https://github.com/willdeeep/ticker-converter/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting configuration
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alpha_vantage.*",
    "airflow.*",
    "sqlalchemy.*",
    "alembic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
